/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* top =  1  *)
(* src = "synth_PPTX.v:15" *)
module synth_PPTX(data_rx000_synt, valid_rx000_synt, active_synt, inserter_synt, IDLE_OUT_synt, data_0rp_synt, data_1rp_synt, data_2rp_synt, data_3rp_synt, valid_0rp_synt, valid_1rp_synt, valid_2rp_synt, valid_3rp_synt, data_0p, data_1p, data_2p, data_3p, valid_0p, valid_1p, clk_4f, valid_2p, valid_3p, clk_f, clk_2f, clk_32f, reset);
  (* src = "synth_PPTX.v:17" *)
  output IDLE_OUT_synt;
  (* src = "synth_PPTX.v:16" *)
  output active_synt;
  (* src = "synth_PPTX.v:26" *)
  input clk_2f;
  (* src = "synth_PPTX.v:27" *)
  input clk_32f;
  (* src = "synth_PPTX.v:25" *)
  input clk_4f;
  (* src = "synth_PPTX.v:26" *)
  input clk_f;
  (* src = "synth_PPTX.v:31" *)
  wire [7:0] data_0_synt;
  (* src = "synth_PPTX.v:32" *)
  wire [7:0] data_00_synt;
  (* src = "synth_PPTX.v:33" *)
  wire [7:0] data_000_synt;
  (* src = "synth_PPTX.v:23" *)
  input [7:0] data_0p;
  (* src = "synth_PPTX.v:34" *)
  wire [7:0] data_0ps_synt;
  (* src = "synth_PPTX.v:35" *)
  wire [7:0] data_0rf_synt;
  (* src = "synth_PPTX.v:19" *)
  output [7:0] data_0rp_synt;
  (* src = "synth_PPTX.v:36" *)
  wire [7:0] data_1_synt;
  (* src = "synth_PPTX.v:37" *)
  wire [7:0] data_11_synt;
  (* src = "synth_PPTX.v:23" *)
  input [7:0] data_1p;
  (* src = "synth_PPTX.v:38" *)
  wire [7:0] data_1ps_synt;
  (* src = "synth_PPTX.v:39" *)
  wire [7:0] data_1rf_synt;
  (* src = "synth_PPTX.v:19" *)
  output [7:0] data_1rp_synt;
  (* src = "synth_PPTX.v:40" *)
  wire [7:0] data_2_synt;
  (* src = "synth_PPTX.v:24" *)
  input [7:0] data_2p;
  (* src = "synth_PPTX.v:41" *)
  wire [7:0] data_2ps_synt;
  (* src = "synth_PPTX.v:42" *)
  wire [7:0] data_2rf_synt;
  (* src = "synth_PPTX.v:20" *)
  output [7:0] data_2rp_synt;
  (* src = "synth_PPTX.v:43" *)
  wire [7:0] data_3_synt;
  (* src = "synth_PPTX.v:24" *)
  input [7:0] data_3p;
  (* src = "synth_PPTX.v:44" *)
  wire [7:0] data_3ps_synt;
  (* src = "synth_PPTX.v:45" *)
  wire [7:0] data_3rf_synt;
  (* src = "synth_PPTX.v:20" *)
  output [7:0] data_3rp_synt;
  (* src = "synth_PPTX.v:46" *)
  wire data_out_synt;
  (* src = "synth_PPTX.v:15" *)
  output [7:0] data_rx000_synt;
  (* src = "synth_PPTX.v:16" *)
  output inserter_synt;
  (* src = "synth_PPTX.v:27" *)
  input reset;
  (* src = "synth_PPTX.v:47" *)
  wire valid_0_synt;
  (* src = "synth_PPTX.v:48" *)
  wire valid_00_synt;
  (* src = "synth_PPTX.v:49" *)
  wire valid_000_synt;
  (* src = "synth_PPTX.v:25" *)
  input valid_0p;
  (* src = "synth_PPTX.v:50" *)
  wire valid_0ps_synt;
  (* src = "synth_PPTX.v:51" *)
  wire valid_0rf_synt;
  (* src = "synth_PPTX.v:21" *)
  output valid_0rp_synt;
  (* src = "synth_PPTX.v:52" *)
  wire valid_1_synt;
  (* src = "synth_PPTX.v:53" *)
  wire valid_11_synt;
  (* src = "synth_PPTX.v:25" *)
  input valid_1p;
  (* src = "synth_PPTX.v:54" *)
  wire valid_1ps_synt;
  (* src = "synth_PPTX.v:55" *)
  wire valid_1rf_synt;
  (* src = "synth_PPTX.v:21" *)
  output valid_1rp_synt;
  (* src = "synth_PPTX.v:56" *)
  wire valid_2_synt;
  (* src = "synth_PPTX.v:26" *)
  input valid_2p;
  (* src = "synth_PPTX.v:57" *)
  wire valid_2ps_synt;
  (* src = "synth_PPTX.v:58" *)
  wire valid_2rf_synt;
  (* src = "synth_PPTX.v:22" *)
  output valid_2rp_synt;
  (* src = "synth_PPTX.v:59" *)
  wire valid_3_synt;
  (* src = "synth_PPTX.v:26" *)
  input valid_3p;
  (* src = "synth_PPTX.v:60" *)
  wire valid_3ps_synt;
  (* src = "synth_PPTX.v:61" *)
  wire valid_3rf_synt;
  (* src = "synth_PPTX.v:22" *)
  output valid_3rp_synt;
  (* src = "synth_PPTX.v:16" *)
  output valid_rx000_synt;
  (* module_not_derived = 32'd1 *)
  (* src = "synth_PPTX.v:64" *)
  synth_etapaflops1 FLOPS1_COND (
    .clk_f(clk_f),
    .data_0p(data_0p),
    .data_0ps_synt(data_0ps_synt),
    .data_1p(data_1p),
    .data_1ps_synt(data_1ps_synt),
    .data_2p(data_2p),
    .data_2ps_synt(data_2ps_synt),
    .data_3p(data_3p),
    .data_3ps_synt(data_3ps_synt),
    .valid_0p(valid_0p),
    .valid_0ps_synt(valid_0ps_synt),
    .valid_1p(valid_1p),
    .valid_1ps_synt(valid_1ps_synt),
    .valid_2p(valid_2p),
    .valid_2ps_synt(valid_2ps_synt),
    .valid_3p(valid_3p),
    .valid_3ps_synt(valid_3ps_synt)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "synth_PPTX.v:112" *)
  synth_etapaflops2 FLOPS2_COND (
    .clk_f(clk_f),
    .data_0_synt(data_0_synt),
    .data_0rf_synt(data_0rf_synt),
    .data_1_synt(data_1_synt),
    .data_1rf_synt(data_1rf_synt),
    .data_2_synt(data_2_synt),
    .data_2rf_synt(data_2rf_synt),
    .data_3_synt(data_3_synt),
    .data_3rf_synt(data_3rf_synt),
    .valid_0_synt(valid_0_synt),
    .valid_0rf_synt(valid_0rf_synt),
    .valid_1_synt(valid_1_synt),
    .valid_1rf_synt(valid_1rf_synt),
    .valid_2_synt(valid_2_synt),
    .valid_2rf_synt(valid_2rf_synt),
    .valid_3_synt(valid_3_synt),
    .valid_3rf_synt(valid_3rf_synt)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "synth_PPTX.v:132" *)
  synth_mux4x2_8bits MUXL1_COND (
    .clk_2f(clk_2f),
    .clk_f(clk_f),
    .data_0_synt(data_0_synt),
    .data_00_synt(data_00_synt),
    .data_1_synt(data_1_synt),
    .data_11_synt(data_11_synt),
    .data_2_synt(data_2_synt),
    .data_3_synt(data_3_synt),
    .reset(reset),
    .valid_0_synt(valid_0_synt),
    .valid_00_synt(valid_00_synt),
    .valid_1_synt(valid_1_synt),
    .valid_11_synt(valid_11_synt),
    .valid_2_synt(valid_2_synt),
    .valid_3_synt(valid_3_synt)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "synth_PPTX.v:150" *)
  synth_mux2x1_8bits MUXL2_COND (
    .clk_2f(clk_2f),
    .clk_4f(clk_4f),
    .data_00_synt(data_00_synt),
    .data_000_synt(data_000_synt),
    .data_11_synt(data_11_synt),
    .reset(reset),
    .valid_00_synt(valid_00_synt),
    .valid_000_synt(valid_000_synt),
    .valid_11_synt(valid_11_synt)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "synth_PPTX.v:162" *)
  synth_paralelo_serial1 PARSER1_COND (
    .clk_32f(clk_32f),
    .clk_4f(clk_4f),
    .data_000_synt(data_000_synt),
    .data_out_synt(data_out_synt),
    .reset(reset),
    .valid_000_synt(valid_000_synt)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "synth_PPTX.v:181" *)
  synth_paralelo_serial2 PARSER2_COND (
    .active_synt(active_synt),
    .clk_32f(clk_32f),
    .clk_4f(clk_4f),
    .inserter_synt(inserter_synt),
    .reset(reset)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "synth_PPTX.v:84" *)
  synth_recirculacion RECIRCULACION_COND (
    .IDLE_OUT_synt(IDLE_OUT_synt),
    .data_0ps_synt(data_0ps_synt),
    .data_0rf_synt(data_0rf_synt),
    .data_0rp_synt(data_0rp_synt),
    .data_1ps_synt(data_1ps_synt),
    .data_1rf_synt(data_1rf_synt),
    .data_1rp_synt(data_1rp_synt),
    .data_2ps_synt(data_2ps_synt),
    .data_2rf_synt(data_2rf_synt),
    .data_2rp_synt(data_2rp_synt),
    .data_3ps_synt(data_3ps_synt),
    .data_3rf_synt(data_3rf_synt),
    .data_3rp_synt(data_3rp_synt),
    .valid_0ps_synt(valid_0ps_synt),
    .valid_0rf_synt(valid_0rf_synt),
    .valid_0rp_synt(valid_0rp_synt),
    .valid_1ps_synt(valid_1ps_synt),
    .valid_1rf_synt(valid_1rf_synt),
    .valid_1rp_synt(valid_1rp_synt),
    .valid_2ps_synt(valid_2ps_synt),
    .valid_2rf_synt(valid_2rf_synt),
    .valid_2rp_synt(valid_2rp_synt),
    .valid_3ps_synt(valid_3ps_synt),
    .valid_3rf_synt(valid_3rf_synt),
    .valid_3rp_synt(valid_3rp_synt)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "synth_PPTX.v:171" *)
  synth_serial_paralelo1 SERPAR1_COND (
    .active_synt(active_synt),
    .clk_32f(clk_32f),
    .clk_4f(clk_4f),
    .data_out_synt(data_out_synt),
    .data_rx000_synt(data_rx000_synt),
    .reset(reset),
    .valid_rx000_synt(valid_rx000_synt)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "synth_PPTX.v:189" *)
  synth_serial_paralelo2 SERPAR2_COND (
    .IDLE_OUT_synt(IDLE_OUT_synt),
    .clk_32f(clk_32f),
    .clk_4f(clk_4f),
    .clk_f(clk_f),
    .inserter_synt(inserter_synt),
    .reset(reset)
  );
endmodule

(* src = "synth_etapaflops1.v:1" *)
module synth_etapaflops1(data_0ps_synt, data_1ps_synt, data_2ps_synt, data_3ps_synt, valid_0ps_synt, valid_1ps_synt, valid_2ps_synt, valid_3ps_synt, data_0p, data_1p, data_2p, data_3p, valid_0p, valid_1p, valid_2p, valid_3p, clk_f);
  (* src = "synth_etapaflops1.v:8" *)
  input clk_f;
  (* src = "synth_etapaflops1.v:5" *)
  input [7:0] data_0p;
  (* src = "synth_etapaflops1.v:1" *)
  output [7:0] data_0ps_synt;
  (* src = "synth_etapaflops1.v:5" *)
  input [7:0] data_1p;
  (* src = "synth_etapaflops1.v:1" *)
  output [7:0] data_1ps_synt;
  (* src = "synth_etapaflops1.v:6" *)
  input [7:0] data_2p;
  (* src = "synth_etapaflops1.v:2" *)
  output [7:0] data_2ps_synt;
  (* src = "synth_etapaflops1.v:6" *)
  input [7:0] data_3p;
  (* src = "synth_etapaflops1.v:2" *)
  output [7:0] data_3ps_synt;
  (* src = "synth_etapaflops1.v:7" *)
  input valid_0p;
  (* src = "synth_etapaflops1.v:3" *)
  output valid_0ps_synt;
  (* src = "synth_etapaflops1.v:7" *)
  input valid_1p;
  (* src = "synth_etapaflops1.v:3" *)
  output valid_1ps_synt;
  (* src = "synth_etapaflops1.v:8" *)
  input valid_2p;
  (* src = "synth_etapaflops1.v:4" *)
  output valid_2ps_synt;
  (* src = "synth_etapaflops1.v:8" *)
  input valid_3p;
  (* src = "synth_etapaflops1.v:4" *)
  output valid_3ps_synt;
  (* src = "synth_etapaflops1.v:10" *)
  DFF _00_ (
    .C(clk_f),
    .D(valid_2p),
    .Q(valid_2ps_synt)
  );
  (* src = "synth_etapaflops1.v:10" *)
  DFF _01_ (
    .C(clk_f),
    .D(valid_3p),
    .Q(valid_3ps_synt)
  );
  (* src = "synth_etapaflops1.v:10" *)
  DFF _02_ (
    .C(clk_f),
    .D(data_0p[0]),
    .Q(data_0ps_synt[0])
  );
  (* src = "synth_etapaflops1.v:10" *)
  DFF _03_ (
    .C(clk_f),
    .D(data_0p[1]),
    .Q(data_0ps_synt[1])
  );
  (* src = "synth_etapaflops1.v:10" *)
  DFF _04_ (
    .C(clk_f),
    .D(data_0p[2]),
    .Q(data_0ps_synt[2])
  );
  (* src = "synth_etapaflops1.v:10" *)
  DFF _05_ (
    .C(clk_f),
    .D(data_0p[3]),
    .Q(data_0ps_synt[3])
  );
  (* src = "synth_etapaflops1.v:10" *)
  DFF _06_ (
    .C(clk_f),
    .D(data_0p[4]),
    .Q(data_0ps_synt[4])
  );
  (* src = "synth_etapaflops1.v:10" *)
  DFF _07_ (
    .C(clk_f),
    .D(data_0p[5]),
    .Q(data_0ps_synt[5])
  );
  (* src = "synth_etapaflops1.v:10" *)
  DFF _08_ (
    .C(clk_f),
    .D(data_0p[6]),
    .Q(data_0ps_synt[6])
  );
  (* src = "synth_etapaflops1.v:10" *)
  DFF _09_ (
    .C(clk_f),
    .D(data_0p[7]),
    .Q(data_0ps_synt[7])
  );
  (* src = "synth_etapaflops1.v:10" *)
  DFF _10_ (
    .C(clk_f),
    .D(valid_0p),
    .Q(valid_0ps_synt)
  );
  (* src = "synth_etapaflops1.v:10" *)
  DFF _11_ (
    .C(clk_f),
    .D(valid_1p),
    .Q(valid_1ps_synt)
  );
  (* src = "synth_etapaflops1.v:10" *)
  DFF _12_ (
    .C(clk_f),
    .D(data_1p[0]),
    .Q(data_1ps_synt[0])
  );
  (* src = "synth_etapaflops1.v:10" *)
  DFF _13_ (
    .C(clk_f),
    .D(data_1p[1]),
    .Q(data_1ps_synt[1])
  );
  (* src = "synth_etapaflops1.v:10" *)
  DFF _14_ (
    .C(clk_f),
    .D(data_1p[2]),
    .Q(data_1ps_synt[2])
  );
  (* src = "synth_etapaflops1.v:10" *)
  DFF _15_ (
    .C(clk_f),
    .D(data_1p[3]),
    .Q(data_1ps_synt[3])
  );
  (* src = "synth_etapaflops1.v:10" *)
  DFF _16_ (
    .C(clk_f),
    .D(data_1p[4]),
    .Q(data_1ps_synt[4])
  );
  (* src = "synth_etapaflops1.v:10" *)
  DFF _17_ (
    .C(clk_f),
    .D(data_1p[5]),
    .Q(data_1ps_synt[5])
  );
  (* src = "synth_etapaflops1.v:10" *)
  DFF _18_ (
    .C(clk_f),
    .D(data_1p[6]),
    .Q(data_1ps_synt[6])
  );
  (* src = "synth_etapaflops1.v:10" *)
  DFF _19_ (
    .C(clk_f),
    .D(data_1p[7]),
    .Q(data_1ps_synt[7])
  );
  (* src = "synth_etapaflops1.v:10" *)
  DFF _20_ (
    .C(clk_f),
    .D(data_2p[0]),
    .Q(data_2ps_synt[0])
  );
  (* src = "synth_etapaflops1.v:10" *)
  DFF _21_ (
    .C(clk_f),
    .D(data_2p[1]),
    .Q(data_2ps_synt[1])
  );
  (* src = "synth_etapaflops1.v:10" *)
  DFF _22_ (
    .C(clk_f),
    .D(data_2p[2]),
    .Q(data_2ps_synt[2])
  );
  (* src = "synth_etapaflops1.v:10" *)
  DFF _23_ (
    .C(clk_f),
    .D(data_2p[3]),
    .Q(data_2ps_synt[3])
  );
  (* src = "synth_etapaflops1.v:10" *)
  DFF _24_ (
    .C(clk_f),
    .D(data_2p[4]),
    .Q(data_2ps_synt[4])
  );
  (* src = "synth_etapaflops1.v:10" *)
  DFF _25_ (
    .C(clk_f),
    .D(data_2p[5]),
    .Q(data_2ps_synt[5])
  );
  (* src = "synth_etapaflops1.v:10" *)
  DFF _26_ (
    .C(clk_f),
    .D(data_2p[6]),
    .Q(data_2ps_synt[6])
  );
  (* src = "synth_etapaflops1.v:10" *)
  DFF _27_ (
    .C(clk_f),
    .D(data_2p[7]),
    .Q(data_2ps_synt[7])
  );
  (* src = "synth_etapaflops1.v:10" *)
  DFF _28_ (
    .C(clk_f),
    .D(data_3p[0]),
    .Q(data_3ps_synt[0])
  );
  (* src = "synth_etapaflops1.v:10" *)
  DFF _29_ (
    .C(clk_f),
    .D(data_3p[1]),
    .Q(data_3ps_synt[1])
  );
  (* src = "synth_etapaflops1.v:10" *)
  DFF _30_ (
    .C(clk_f),
    .D(data_3p[2]),
    .Q(data_3ps_synt[2])
  );
  (* src = "synth_etapaflops1.v:10" *)
  DFF _31_ (
    .C(clk_f),
    .D(data_3p[3]),
    .Q(data_3ps_synt[3])
  );
  (* src = "synth_etapaflops1.v:10" *)
  DFF _32_ (
    .C(clk_f),
    .D(data_3p[4]),
    .Q(data_3ps_synt[4])
  );
  (* src = "synth_etapaflops1.v:10" *)
  DFF _33_ (
    .C(clk_f),
    .D(data_3p[5]),
    .Q(data_3ps_synt[5])
  );
  (* src = "synth_etapaflops1.v:10" *)
  DFF _34_ (
    .C(clk_f),
    .D(data_3p[6]),
    .Q(data_3ps_synt[6])
  );
  (* src = "synth_etapaflops1.v:10" *)
  DFF _35_ (
    .C(clk_f),
    .D(data_3p[7]),
    .Q(data_3ps_synt[7])
  );
endmodule

(* src = "synth_etapaflops2.v:1" *)
module synth_etapaflops2(data_0_synt, data_1_synt, data_2_synt, data_3_synt, valid_0_synt, valid_1_synt, valid_2_synt, valid_3_synt, data_0rf_synt, data_1rf_synt, data_2rf_synt, data_3rf_synt, valid_0rf_synt, valid_1rf_synt, valid_2rf_synt, valid_3rf_synt, clk_f);
  (* src = "synth_etapaflops2.v:8" *)
  input clk_f;
  (* src = "synth_etapaflops2.v:1" *)
  output [7:0] data_0_synt;
  (* src = "synth_etapaflops2.v:5" *)
  input [7:0] data_0rf_synt;
  (* src = "synth_etapaflops2.v:1" *)
  output [7:0] data_1_synt;
  (* src = "synth_etapaflops2.v:5" *)
  input [7:0] data_1rf_synt;
  (* src = "synth_etapaflops2.v:2" *)
  output [7:0] data_2_synt;
  (* src = "synth_etapaflops2.v:6" *)
  input [7:0] data_2rf_synt;
  (* src = "synth_etapaflops2.v:2" *)
  output [7:0] data_3_synt;
  (* src = "synth_etapaflops2.v:6" *)
  input [7:0] data_3rf_synt;
  (* src = "synth_etapaflops2.v:3" *)
  output valid_0_synt;
  (* src = "synth_etapaflops2.v:7" *)
  input valid_0rf_synt;
  (* src = "synth_etapaflops2.v:3" *)
  output valid_1_synt;
  (* src = "synth_etapaflops2.v:7" *)
  input valid_1rf_synt;
  (* src = "synth_etapaflops2.v:4" *)
  output valid_2_synt;
  (* src = "synth_etapaflops2.v:8" *)
  input valid_2rf_synt;
  (* src = "synth_etapaflops2.v:4" *)
  output valid_3_synt;
  (* src = "synth_etapaflops2.v:8" *)
  input valid_3rf_synt;
  (* src = "synth_etapaflops2.v:10" *)
  DFF _00_ (
    .C(clk_f),
    .D(data_1rf_synt[0]),
    .Q(data_1_synt[0])
  );
  (* src = "synth_etapaflops2.v:10" *)
  DFF _01_ (
    .C(clk_f),
    .D(data_1rf_synt[1]),
    .Q(data_1_synt[1])
  );
  (* src = "synth_etapaflops2.v:10" *)
  DFF _02_ (
    .C(clk_f),
    .D(data_1rf_synt[2]),
    .Q(data_1_synt[2])
  );
  (* src = "synth_etapaflops2.v:10" *)
  DFF _03_ (
    .C(clk_f),
    .D(data_1rf_synt[3]),
    .Q(data_1_synt[3])
  );
  (* src = "synth_etapaflops2.v:10" *)
  DFF _04_ (
    .C(clk_f),
    .D(data_1rf_synt[4]),
    .Q(data_1_synt[4])
  );
  (* src = "synth_etapaflops2.v:10" *)
  DFF _05_ (
    .C(clk_f),
    .D(data_1rf_synt[5]),
    .Q(data_1_synt[5])
  );
  (* src = "synth_etapaflops2.v:10" *)
  DFF _06_ (
    .C(clk_f),
    .D(data_1rf_synt[6]),
    .Q(data_1_synt[6])
  );
  (* src = "synth_etapaflops2.v:10" *)
  DFF _07_ (
    .C(clk_f),
    .D(data_1rf_synt[7]),
    .Q(data_1_synt[7])
  );
  (* src = "synth_etapaflops2.v:10" *)
  DFF _08_ (
    .C(clk_f),
    .D(data_2rf_synt[0]),
    .Q(data_2_synt[0])
  );
  (* src = "synth_etapaflops2.v:10" *)
  DFF _09_ (
    .C(clk_f),
    .D(data_2rf_synt[1]),
    .Q(data_2_synt[1])
  );
  (* src = "synth_etapaflops2.v:10" *)
  DFF _10_ (
    .C(clk_f),
    .D(data_2rf_synt[2]),
    .Q(data_2_synt[2])
  );
  (* src = "synth_etapaflops2.v:10" *)
  DFF _11_ (
    .C(clk_f),
    .D(data_2rf_synt[3]),
    .Q(data_2_synt[3])
  );
  (* src = "synth_etapaflops2.v:10" *)
  DFF _12_ (
    .C(clk_f),
    .D(data_2rf_synt[4]),
    .Q(data_2_synt[4])
  );
  (* src = "synth_etapaflops2.v:10" *)
  DFF _13_ (
    .C(clk_f),
    .D(data_2rf_synt[5]),
    .Q(data_2_synt[5])
  );
  (* src = "synth_etapaflops2.v:10" *)
  DFF _14_ (
    .C(clk_f),
    .D(data_2rf_synt[6]),
    .Q(data_2_synt[6])
  );
  (* src = "synth_etapaflops2.v:10" *)
  DFF _15_ (
    .C(clk_f),
    .D(data_2rf_synt[7]),
    .Q(data_2_synt[7])
  );
  (* src = "synth_etapaflops2.v:10" *)
  DFF _16_ (
    .C(clk_f),
    .D(valid_0rf_synt),
    .Q(valid_0_synt)
  );
  (* src = "synth_etapaflops2.v:10" *)
  DFF _17_ (
    .C(clk_f),
    .D(valid_1rf_synt),
    .Q(valid_1_synt)
  );
  (* src = "synth_etapaflops2.v:10" *)
  DFF _18_ (
    .C(clk_f),
    .D(valid_2rf_synt),
    .Q(valid_2_synt)
  );
  (* src = "synth_etapaflops2.v:10" *)
  DFF _19_ (
    .C(clk_f),
    .D(valid_3rf_synt),
    .Q(valid_3_synt)
  );
  (* src = "synth_etapaflops2.v:10" *)
  DFF _20_ (
    .C(clk_f),
    .D(data_0rf_synt[0]),
    .Q(data_0_synt[0])
  );
  (* src = "synth_etapaflops2.v:10" *)
  DFF _21_ (
    .C(clk_f),
    .D(data_0rf_synt[1]),
    .Q(data_0_synt[1])
  );
  (* src = "synth_etapaflops2.v:10" *)
  DFF _22_ (
    .C(clk_f),
    .D(data_0rf_synt[2]),
    .Q(data_0_synt[2])
  );
  (* src = "synth_etapaflops2.v:10" *)
  DFF _23_ (
    .C(clk_f),
    .D(data_0rf_synt[3]),
    .Q(data_0_synt[3])
  );
  (* src = "synth_etapaflops2.v:10" *)
  DFF _24_ (
    .C(clk_f),
    .D(data_0rf_synt[4]),
    .Q(data_0_synt[4])
  );
  (* src = "synth_etapaflops2.v:10" *)
  DFF _25_ (
    .C(clk_f),
    .D(data_0rf_synt[5]),
    .Q(data_0_synt[5])
  );
  (* src = "synth_etapaflops2.v:10" *)
  DFF _26_ (
    .C(clk_f),
    .D(data_0rf_synt[6]),
    .Q(data_0_synt[6])
  );
  (* src = "synth_etapaflops2.v:10" *)
  DFF _27_ (
    .C(clk_f),
    .D(data_0rf_synt[7]),
    .Q(data_0_synt[7])
  );
  (* src = "synth_etapaflops2.v:10" *)
  DFF _28_ (
    .C(clk_f),
    .D(data_3rf_synt[0]),
    .Q(data_3_synt[0])
  );
  (* src = "synth_etapaflops2.v:10" *)
  DFF _29_ (
    .C(clk_f),
    .D(data_3rf_synt[1]),
    .Q(data_3_synt[1])
  );
  (* src = "synth_etapaflops2.v:10" *)
  DFF _30_ (
    .C(clk_f),
    .D(data_3rf_synt[2]),
    .Q(data_3_synt[2])
  );
  (* src = "synth_etapaflops2.v:10" *)
  DFF _31_ (
    .C(clk_f),
    .D(data_3rf_synt[3]),
    .Q(data_3_synt[3])
  );
  (* src = "synth_etapaflops2.v:10" *)
  DFF _32_ (
    .C(clk_f),
    .D(data_3rf_synt[4]),
    .Q(data_3_synt[4])
  );
  (* src = "synth_etapaflops2.v:10" *)
  DFF _33_ (
    .C(clk_f),
    .D(data_3rf_synt[5]),
    .Q(data_3_synt[5])
  );
  (* src = "synth_etapaflops2.v:10" *)
  DFF _34_ (
    .C(clk_f),
    .D(data_3rf_synt[6]),
    .Q(data_3_synt[6])
  );
  (* src = "synth_etapaflops2.v:10" *)
  DFF _35_ (
    .C(clk_f),
    .D(data_3rf_synt[7]),
    .Q(data_3_synt[7])
  );
endmodule

(* src = "synth_mux2x1_8bits.v:10" *)
module synth_mux2x1_8bits(data_000_synt, valid_000_synt, data_00_synt, data_11_synt, valid_00_synt, valid_11_synt, clk_4f, clk_2f, reset);
  (* src = "synth_mux2x1_8bits.v:40" *)
  wire [7:0] _000_;
  (* src = "synth_mux2x1_8bits.v:31" *)
  wire [8:0] _001_;
  (* src = "synth_mux2x1_8bits.v:40" *)
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  (* src = "synth_mux2x1_8bits.v:14" *)
  input clk_2f;
  (* src = "synth_mux2x1_8bits.v:14" *)
  input clk_4f;
  (* src = "synth_mux2x1_8bits.v:12" *)
  input [7:0] data_00_synt;
  (* src = "synth_mux2x1_8bits.v:10" *)
  output [7:0] data_000_synt;
  (* src = "synth_mux2x1_8bits.v:12" *)
  input [7:0] data_11_synt;
  (* src = "synth_mux2x1_8bits.v:18" *)
  wire [8:0] paq_000;
  (* src = "synth_mux2x1_8bits.v:16" *)
  wire [8:0] paq_0_x;
  (* src = "synth_mux2x1_8bits.v:17" *)
  wire [8:0] paq_1_x;
  (* src = "synth_mux2x1_8bits.v:14" *)
  input reset;
  (* src = "synth_mux2x1_8bits.v:19" *)
  wire reset_s;
  (* src = "synth_mux2x1_8bits.v:13" *)
  input valid_00_synt;
  (* src = "synth_mux2x1_8bits.v:11" *)
  output valid_000_synt;
  (* src = "synth_mux2x1_8bits.v:13" *)
  input valid_11_synt;
  NOT _040_ (
    .A(clk_2f),
    .Y(_015_)
  );
  NOT _041_ (
    .A(clk_4f),
    .Y(_003_)
  );
  NAND _042_ (
    .A(data_00_synt[0]),
    .B(clk_2f),
    .Y(_016_)
  );
  NAND _043_ (
    .A(data_11_synt[0]),
    .B(_015_),
    .Y(_017_)
  );
  NAND _044_ (
    .A(_016_),
    .B(_017_),
    .Y(_001_[1])
  );
  NAND _045_ (
    .A(clk_2f),
    .B(data_00_synt[1]),
    .Y(_018_)
  );
  NAND _046_ (
    .A(_015_),
    .B(data_11_synt[1]),
    .Y(_019_)
  );
  NAND _047_ (
    .A(_018_),
    .B(_019_),
    .Y(_001_[2])
  );
  NAND _048_ (
    .A(clk_2f),
    .B(data_00_synt[2]),
    .Y(_020_)
  );
  NAND _049_ (
    .A(_015_),
    .B(data_11_synt[2]),
    .Y(_021_)
  );
  NAND _050_ (
    .A(_020_),
    .B(_021_),
    .Y(_001_[3])
  );
  NAND _051_ (
    .A(clk_2f),
    .B(data_00_synt[3]),
    .Y(_022_)
  );
  NAND _052_ (
    .A(_015_),
    .B(data_11_synt[3]),
    .Y(_023_)
  );
  NAND _053_ (
    .A(_022_),
    .B(_023_),
    .Y(_001_[4])
  );
  NAND _054_ (
    .A(clk_2f),
    .B(data_00_synt[4]),
    .Y(_024_)
  );
  NAND _055_ (
    .A(_015_),
    .B(data_11_synt[4]),
    .Y(_025_)
  );
  NAND _056_ (
    .A(_024_),
    .B(_025_),
    .Y(_001_[5])
  );
  NAND _057_ (
    .A(clk_2f),
    .B(data_00_synt[5]),
    .Y(_026_)
  );
  NAND _058_ (
    .A(_015_),
    .B(data_11_synt[5]),
    .Y(_027_)
  );
  NAND _059_ (
    .A(_026_),
    .B(_027_),
    .Y(_001_[6])
  );
  NAND _060_ (
    .A(clk_2f),
    .B(data_00_synt[6]),
    .Y(_028_)
  );
  NAND _061_ (
    .A(_015_),
    .B(data_11_synt[6]),
    .Y(_029_)
  );
  NAND _062_ (
    .A(_028_),
    .B(_029_),
    .Y(_001_[7])
  );
  NAND _063_ (
    .A(clk_2f),
    .B(data_00_synt[7]),
    .Y(_030_)
  );
  NAND _064_ (
    .A(_015_),
    .B(data_11_synt[7]),
    .Y(_031_)
  );
  NAND _065_ (
    .A(_030_),
    .B(_031_),
    .Y(_001_[8])
  );
  NAND _066_ (
    .A(paq_000[1]),
    .B(reset_s),
    .Y(_032_)
  );
  NOT _067_ (
    .A(_032_),
    .Y(_000_[0])
  );
  NAND _068_ (
    .A(reset_s),
    .B(paq_000[2]),
    .Y(_033_)
  );
  NOT _069_ (
    .A(_033_),
    .Y(_000_[1])
  );
  NAND _070_ (
    .A(reset_s),
    .B(paq_000[3]),
    .Y(_034_)
  );
  NOT _071_ (
    .A(_034_),
    .Y(_000_[2])
  );
  NAND _072_ (
    .A(reset_s),
    .B(paq_000[4]),
    .Y(_035_)
  );
  NOT _073_ (
    .A(_035_),
    .Y(_000_[3])
  );
  NAND _074_ (
    .A(reset_s),
    .B(paq_000[5]),
    .Y(_036_)
  );
  NOT _075_ (
    .A(_036_),
    .Y(_000_[4])
  );
  NAND _076_ (
    .A(reset_s),
    .B(paq_000[6]),
    .Y(_037_)
  );
  NOT _077_ (
    .A(_037_),
    .Y(_000_[5])
  );
  NAND _078_ (
    .A(reset_s),
    .B(paq_000[7]),
    .Y(_038_)
  );
  NOT _079_ (
    .A(_038_),
    .Y(_000_[6])
  );
  NAND _080_ (
    .A(reset_s),
    .B(paq_000[8]),
    .Y(_039_)
  );
  NOT _081_ (
    .A(_039_),
    .Y(_000_[7])
  );
  NAND _082_ (
    .A(reset_s),
    .B(paq_000[0]),
    .Y(_012_)
  );
  NOT _083_ (
    .A(_012_),
    .Y(_002_)
  );
  NAND _084_ (
    .A(clk_2f),
    .B(valid_00_synt),
    .Y(_013_)
  );
  NAND _085_ (
    .A(_015_),
    .B(valid_11_synt),
    .Y(_014_)
  );
  NAND _086_ (
    .A(_013_),
    .B(_014_),
    .Y(_001_[0])
  );
  NOT _087_ (
    .A(clk_4f),
    .Y(_004_)
  );
  NOT _088_ (
    .A(clk_4f),
    .Y(_005_)
  );
  NOT _089_ (
    .A(clk_4f),
    .Y(_006_)
  );
  NOT _090_ (
    .A(clk_4f),
    .Y(_007_)
  );
  NOT _091_ (
    .A(clk_4f),
    .Y(_008_)
  );
  NOT _092_ (
    .A(clk_4f),
    .Y(_009_)
  );
  NOT _093_ (
    .A(clk_4f),
    .Y(_010_)
  );
  NOT _094_ (
    .A(clk_4f),
    .Y(_011_)
  );
  (* src = "synth_mux2x1_8bits.v:40" *)
  DFF _095_ (
    .C(clk_4f),
    .D(_000_[0]),
    .Q(data_000_synt[0])
  );
  (* src = "synth_mux2x1_8bits.v:40" *)
  DFF _096_ (
    .C(clk_4f),
    .D(_000_[1]),
    .Q(data_000_synt[1])
  );
  (* src = "synth_mux2x1_8bits.v:40" *)
  DFF _097_ (
    .C(clk_4f),
    .D(_000_[2]),
    .Q(data_000_synt[2])
  );
  (* src = "synth_mux2x1_8bits.v:40" *)
  DFF _098_ (
    .C(clk_4f),
    .D(_000_[3]),
    .Q(data_000_synt[3])
  );
  (* src = "synth_mux2x1_8bits.v:40" *)
  DFF _099_ (
    .C(clk_4f),
    .D(_000_[4]),
    .Q(data_000_synt[4])
  );
  (* src = "synth_mux2x1_8bits.v:40" *)
  DFF _100_ (
    .C(clk_4f),
    .D(_000_[5]),
    .Q(data_000_synt[5])
  );
  (* src = "synth_mux2x1_8bits.v:40" *)
  DFF _101_ (
    .C(clk_4f),
    .D(_000_[6]),
    .Q(data_000_synt[6])
  );
  (* src = "synth_mux2x1_8bits.v:40" *)
  DFF _102_ (
    .C(clk_4f),
    .D(_000_[7]),
    .Q(data_000_synt[7])
  );
  (* src = "synth_mux2x1_8bits.v:40" *)
  DFF _103_ (
    .C(clk_4f),
    .D(_002_),
    .Q(valid_000_synt)
  );
  (* src = "synth_mux2x1_8bits.v:31" *)
  DFF _104_ (
    .C(_003_),
    .D(_001_[0]),
    .Q(paq_000[0])
  );
  (* src = "synth_mux2x1_8bits.v:31" *)
  DFF _105_ (
    .C(_004_),
    .D(_001_[1]),
    .Q(paq_000[1])
  );
  (* src = "synth_mux2x1_8bits.v:31" *)
  DFF _106_ (
    .C(_005_),
    .D(_001_[2]),
    .Q(paq_000[2])
  );
  (* src = "synth_mux2x1_8bits.v:31" *)
  DFF _107_ (
    .C(_006_),
    .D(_001_[3]),
    .Q(paq_000[3])
  );
  (* src = "synth_mux2x1_8bits.v:31" *)
  DFF _108_ (
    .C(_007_),
    .D(_001_[4]),
    .Q(paq_000[4])
  );
  (* src = "synth_mux2x1_8bits.v:31" *)
  DFF _109_ (
    .C(_008_),
    .D(_001_[5]),
    .Q(paq_000[5])
  );
  (* src = "synth_mux2x1_8bits.v:31" *)
  DFF _110_ (
    .C(_009_),
    .D(_001_[6]),
    .Q(paq_000[6])
  );
  (* src = "synth_mux2x1_8bits.v:31" *)
  DFF _111_ (
    .C(_010_),
    .D(_001_[7]),
    .Q(paq_000[7])
  );
  (* src = "synth_mux2x1_8bits.v:31" *)
  DFF _112_ (
    .C(_011_),
    .D(_001_[8]),
    .Q(paq_000[8])
  );
  (* src = "synth_mux2x1_8bits.v:23" *)
  DFF _113_ (
    .C(clk_4f),
    .D(reset),
    .Q(reset_s)
  );
  assign paq_0_x = { data_00_synt, valid_00_synt };
  assign paq_1_x = { data_11_synt, valid_11_synt };
endmodule

(* src = "synth_mux4x2_8bits.v:10" *)
module synth_mux4x2_8bits(data_00_synt, data_11_synt, valid_00_synt, valid_11_synt, data_0_synt, data_1_synt, data_2_synt, data_3_synt, valid_0_synt, valid_1_synt, valid_2_synt, valid_3_synt, clk_2f, clk_f, reset);
  (* src = "synth_mux4x2_8bits.v:47" *)
  wire [7:0] _000_;
  (* src = "synth_mux4x2_8bits.v:47" *)
  wire [7:0] _001_;
  (* src = "synth_mux4x2_8bits.v:36" *)
  wire [8:0] _002_;
  (* src = "synth_mux4x2_8bits.v:36" *)
  wire [8:0] _003_;
  (* src = "synth_mux4x2_8bits.v:47" *)
  wire _004_;
  (* src = "synth_mux4x2_8bits.v:47" *)
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  (* src = "synth_mux4x2_8bits.v:14" *)
  input clk_2f;
  (* src = "synth_mux4x2_8bits.v:14" *)
  input clk_f;
  (* src = "synth_mux4x2_8bits.v:12" *)
  input [7:0] data_0_synt;
  (* src = "synth_mux4x2_8bits.v:10" *)
  output [7:0] data_00_synt;
  (* src = "synth_mux4x2_8bits.v:12" *)
  input [7:0] data_1_synt;
  (* src = "synth_mux4x2_8bits.v:10" *)
  output [7:0] data_11_synt;
  (* src = "synth_mux4x2_8bits.v:12" *)
  input [7:0] data_2_synt;
  (* src = "synth_mux4x2_8bits.v:12" *)
  input [7:0] data_3_synt;
  (* src = "synth_mux4x2_8bits.v:20" *)
  wire [8:0] paq_00;
  (* src = "synth_mux4x2_8bits.v:16" *)
  wire [8:0] paq_0_x;
  (* src = "synth_mux4x2_8bits.v:20" *)
  wire [8:0] paq_11;
  (* src = "synth_mux4x2_8bits.v:17" *)
  wire [8:0] paq_1_x;
  (* src = "synth_mux4x2_8bits.v:18" *)
  wire [8:0] paq_2_x;
  (* src = "synth_mux4x2_8bits.v:19" *)
  wire [8:0] paq_3_x;
  (* src = "synth_mux4x2_8bits.v:14" *)
  input reset;
  (* src = "synth_mux4x2_8bits.v:21" *)
  wire reset_s;
  (* src = "synth_mux4x2_8bits.v:13" *)
  input valid_0_synt;
  (* src = "synth_mux4x2_8bits.v:11" *)
  output valid_00_synt;
  (* src = "synth_mux4x2_8bits.v:13" *)
  input valid_1_synt;
  (* src = "synth_mux4x2_8bits.v:11" *)
  output valid_11_synt;
  (* src = "synth_mux4x2_8bits.v:13" *)
  input valid_2_synt;
  (* src = "synth_mux4x2_8bits.v:13" *)
  input valid_3_synt;
  NOT _079_ (
    .A(clk_f),
    .Y(_024_)
  );
  NOT _080_ (
    .A(clk_2f),
    .Y(_006_)
  );
  NAND _081_ (
    .A(paq_00[2]),
    .B(reset_s),
    .Y(_025_)
  );
  NOT _082_ (
    .A(_025_),
    .Y(_000_[1])
  );
  NAND _083_ (
    .A(reset_s),
    .B(paq_00[3]),
    .Y(_026_)
  );
  NOT _084_ (
    .A(_026_),
    .Y(_000_[2])
  );
  NAND _085_ (
    .A(reset_s),
    .B(paq_00[4]),
    .Y(_027_)
  );
  NOT _086_ (
    .A(_027_),
    .Y(_000_[3])
  );
  NAND _087_ (
    .A(reset_s),
    .B(paq_00[5]),
    .Y(_028_)
  );
  NOT _088_ (
    .A(_028_),
    .Y(_000_[4])
  );
  NAND _089_ (
    .A(reset_s),
    .B(paq_00[6]),
    .Y(_029_)
  );
  NOT _090_ (
    .A(_029_),
    .Y(_000_[5])
  );
  NAND _091_ (
    .A(reset_s),
    .B(paq_00[7]),
    .Y(_030_)
  );
  NOT _092_ (
    .A(_030_),
    .Y(_000_[6])
  );
  NAND _093_ (
    .A(reset_s),
    .B(paq_00[8]),
    .Y(_031_)
  );
  NOT _094_ (
    .A(_031_),
    .Y(_000_[7])
  );
  NAND _095_ (
    .A(reset_s),
    .B(paq_11[1]),
    .Y(_032_)
  );
  NOT _096_ (
    .A(_032_),
    .Y(_001_[0])
  );
  NAND _097_ (
    .A(reset_s),
    .B(paq_11[2]),
    .Y(_033_)
  );
  NOT _098_ (
    .A(_033_),
    .Y(_001_[1])
  );
  NAND _099_ (
    .A(reset_s),
    .B(paq_11[3]),
    .Y(_034_)
  );
  NOT _100_ (
    .A(_034_),
    .Y(_001_[2])
  );
  NAND _101_ (
    .A(reset_s),
    .B(paq_11[4]),
    .Y(_035_)
  );
  NOT _102_ (
    .A(_035_),
    .Y(_001_[3])
  );
  NAND _103_ (
    .A(reset_s),
    .B(paq_11[5]),
    .Y(_036_)
  );
  NOT _104_ (
    .A(_036_),
    .Y(_001_[4])
  );
  NAND _105_ (
    .A(reset_s),
    .B(paq_11[6]),
    .Y(_037_)
  );
  NOT _106_ (
    .A(_037_),
    .Y(_001_[5])
  );
  NAND _107_ (
    .A(reset_s),
    .B(paq_11[7]),
    .Y(_038_)
  );
  NOT _108_ (
    .A(_038_),
    .Y(_001_[6])
  );
  NAND _109_ (
    .A(reset_s),
    .B(paq_11[8]),
    .Y(_039_)
  );
  NOT _110_ (
    .A(_039_),
    .Y(_001_[7])
  );
  NAND _111_ (
    .A(reset_s),
    .B(paq_00[0]),
    .Y(_040_)
  );
  NOT _112_ (
    .A(_040_),
    .Y(_004_)
  );
  NAND _113_ (
    .A(valid_0_synt),
    .B(clk_f),
    .Y(_041_)
  );
  NAND _114_ (
    .A(valid_1_synt),
    .B(_024_),
    .Y(_042_)
  );
  NAND _115_ (
    .A(_041_),
    .B(_042_),
    .Y(_002_[0])
  );
  NAND _116_ (
    .A(clk_f),
    .B(data_0_synt[0]),
    .Y(_043_)
  );
  NAND _117_ (
    .A(_024_),
    .B(data_1_synt[0]),
    .Y(_044_)
  );
  NAND _118_ (
    .A(_043_),
    .B(_044_),
    .Y(_002_[1])
  );
  NAND _119_ (
    .A(clk_f),
    .B(data_0_synt[1]),
    .Y(_045_)
  );
  NAND _120_ (
    .A(_024_),
    .B(data_1_synt[1]),
    .Y(_046_)
  );
  NAND _121_ (
    .A(_045_),
    .B(_046_),
    .Y(_002_[2])
  );
  NAND _122_ (
    .A(clk_f),
    .B(data_0_synt[2]),
    .Y(_047_)
  );
  NAND _123_ (
    .A(_024_),
    .B(data_1_synt[2]),
    .Y(_048_)
  );
  NAND _124_ (
    .A(_047_),
    .B(_048_),
    .Y(_002_[3])
  );
  NAND _125_ (
    .A(clk_f),
    .B(data_0_synt[3]),
    .Y(_049_)
  );
  NAND _126_ (
    .A(_024_),
    .B(data_1_synt[3]),
    .Y(_050_)
  );
  NAND _127_ (
    .A(_049_),
    .B(_050_),
    .Y(_002_[4])
  );
  NAND _128_ (
    .A(clk_f),
    .B(data_0_synt[4]),
    .Y(_051_)
  );
  NAND _129_ (
    .A(_024_),
    .B(data_1_synt[4]),
    .Y(_052_)
  );
  NAND _130_ (
    .A(_051_),
    .B(_052_),
    .Y(_002_[5])
  );
  NAND _131_ (
    .A(clk_f),
    .B(data_0_synt[5]),
    .Y(_053_)
  );
  NAND _132_ (
    .A(_024_),
    .B(data_1_synt[5]),
    .Y(_054_)
  );
  NAND _133_ (
    .A(_053_),
    .B(_054_),
    .Y(_002_[6])
  );
  NAND _134_ (
    .A(clk_f),
    .B(data_0_synt[6]),
    .Y(_055_)
  );
  NAND _135_ (
    .A(_024_),
    .B(data_1_synt[6]),
    .Y(_056_)
  );
  NAND _136_ (
    .A(_055_),
    .B(_056_),
    .Y(_002_[7])
  );
  NAND _137_ (
    .A(clk_f),
    .B(data_0_synt[7]),
    .Y(_057_)
  );
  NAND _138_ (
    .A(_024_),
    .B(data_1_synt[7]),
    .Y(_058_)
  );
  NAND _139_ (
    .A(_057_),
    .B(_058_),
    .Y(_002_[8])
  );
  NAND _140_ (
    .A(reset_s),
    .B(paq_11[0]),
    .Y(_059_)
  );
  NOT _141_ (
    .A(_059_),
    .Y(_005_)
  );
  NAND _142_ (
    .A(clk_f),
    .B(valid_2_synt),
    .Y(_060_)
  );
  NAND _143_ (
    .A(_024_),
    .B(valid_3_synt),
    .Y(_061_)
  );
  NAND _144_ (
    .A(_060_),
    .B(_061_),
    .Y(_003_[0])
  );
  NAND _145_ (
    .A(clk_f),
    .B(data_2_synt[0]),
    .Y(_062_)
  );
  NAND _146_ (
    .A(_024_),
    .B(data_3_synt[0]),
    .Y(_063_)
  );
  NAND _147_ (
    .A(_062_),
    .B(_063_),
    .Y(_003_[1])
  );
  NAND _148_ (
    .A(clk_f),
    .B(data_2_synt[1]),
    .Y(_064_)
  );
  NAND _149_ (
    .A(_024_),
    .B(data_3_synt[1]),
    .Y(_065_)
  );
  NAND _150_ (
    .A(_064_),
    .B(_065_),
    .Y(_003_[2])
  );
  NAND _151_ (
    .A(clk_f),
    .B(data_2_synt[2]),
    .Y(_066_)
  );
  NAND _152_ (
    .A(_024_),
    .B(data_3_synt[2]),
    .Y(_067_)
  );
  NAND _153_ (
    .A(_066_),
    .B(_067_),
    .Y(_003_[3])
  );
  NAND _154_ (
    .A(clk_f),
    .B(data_2_synt[3]),
    .Y(_068_)
  );
  NAND _155_ (
    .A(_024_),
    .B(data_3_synt[3]),
    .Y(_069_)
  );
  NAND _156_ (
    .A(_068_),
    .B(_069_),
    .Y(_003_[4])
  );
  NAND _157_ (
    .A(clk_f),
    .B(data_2_synt[4]),
    .Y(_070_)
  );
  NAND _158_ (
    .A(_024_),
    .B(data_3_synt[4]),
    .Y(_071_)
  );
  NAND _159_ (
    .A(_070_),
    .B(_071_),
    .Y(_003_[5])
  );
  NAND _160_ (
    .A(clk_f),
    .B(data_2_synt[5]),
    .Y(_072_)
  );
  NAND _161_ (
    .A(_024_),
    .B(data_3_synt[5]),
    .Y(_073_)
  );
  NAND _162_ (
    .A(_072_),
    .B(_073_),
    .Y(_003_[6])
  );
  NAND _163_ (
    .A(clk_f),
    .B(data_2_synt[6]),
    .Y(_074_)
  );
  NAND _164_ (
    .A(_024_),
    .B(data_3_synt[6]),
    .Y(_075_)
  );
  NAND _165_ (
    .A(_074_),
    .B(_075_),
    .Y(_003_[7])
  );
  NAND _166_ (
    .A(clk_f),
    .B(data_2_synt[7]),
    .Y(_076_)
  );
  NAND _167_ (
    .A(_024_),
    .B(data_3_synt[7]),
    .Y(_077_)
  );
  NAND _168_ (
    .A(_076_),
    .B(_077_),
    .Y(_003_[8])
  );
  NAND _169_ (
    .A(reset_s),
    .B(paq_00[1]),
    .Y(_078_)
  );
  NOT _170_ (
    .A(_078_),
    .Y(_000_[0])
  );
  NOT _171_ (
    .A(clk_2f),
    .Y(_007_)
  );
  NOT _172_ (
    .A(clk_2f),
    .Y(_008_)
  );
  NOT _173_ (
    .A(clk_2f),
    .Y(_009_)
  );
  NOT _174_ (
    .A(clk_2f),
    .Y(_010_)
  );
  NOT _175_ (
    .A(clk_2f),
    .Y(_011_)
  );
  NOT _176_ (
    .A(clk_2f),
    .Y(_012_)
  );
  NOT _177_ (
    .A(clk_2f),
    .Y(_013_)
  );
  NOT _178_ (
    .A(clk_2f),
    .Y(_014_)
  );
  NOT _179_ (
    .A(clk_2f),
    .Y(_015_)
  );
  NOT _180_ (
    .A(clk_2f),
    .Y(_016_)
  );
  NOT _181_ (
    .A(clk_2f),
    .Y(_017_)
  );
  NOT _182_ (
    .A(clk_2f),
    .Y(_018_)
  );
  NOT _183_ (
    .A(clk_2f),
    .Y(_019_)
  );
  NOT _184_ (
    .A(clk_2f),
    .Y(_020_)
  );
  NOT _185_ (
    .A(clk_2f),
    .Y(_021_)
  );
  NOT _186_ (
    .A(clk_2f),
    .Y(_022_)
  );
  NOT _187_ (
    .A(clk_2f),
    .Y(_023_)
  );
  (* src = "synth_mux4x2_8bits.v:47" *)
  DFF _188_ (
    .C(clk_2f),
    .D(_000_[0]),
    .Q(data_00_synt[0])
  );
  (* src = "synth_mux4x2_8bits.v:47" *)
  DFF _189_ (
    .C(clk_2f),
    .D(_000_[1]),
    .Q(data_00_synt[1])
  );
  (* src = "synth_mux4x2_8bits.v:47" *)
  DFF _190_ (
    .C(clk_2f),
    .D(_000_[2]),
    .Q(data_00_synt[2])
  );
  (* src = "synth_mux4x2_8bits.v:47" *)
  DFF _191_ (
    .C(clk_2f),
    .D(_000_[3]),
    .Q(data_00_synt[3])
  );
  (* src = "synth_mux4x2_8bits.v:47" *)
  DFF _192_ (
    .C(clk_2f),
    .D(_000_[4]),
    .Q(data_00_synt[4])
  );
  (* src = "synth_mux4x2_8bits.v:47" *)
  DFF _193_ (
    .C(clk_2f),
    .D(_000_[5]),
    .Q(data_00_synt[5])
  );
  (* src = "synth_mux4x2_8bits.v:47" *)
  DFF _194_ (
    .C(clk_2f),
    .D(_000_[6]),
    .Q(data_00_synt[6])
  );
  (* src = "synth_mux4x2_8bits.v:47" *)
  DFF _195_ (
    .C(clk_2f),
    .D(_000_[7]),
    .Q(data_00_synt[7])
  );
  (* src = "synth_mux4x2_8bits.v:47" *)
  DFF _196_ (
    .C(clk_2f),
    .D(_001_[0]),
    .Q(data_11_synt[0])
  );
  (* src = "synth_mux4x2_8bits.v:47" *)
  DFF _197_ (
    .C(clk_2f),
    .D(_001_[1]),
    .Q(data_11_synt[1])
  );
  (* src = "synth_mux4x2_8bits.v:47" *)
  DFF _198_ (
    .C(clk_2f),
    .D(_001_[2]),
    .Q(data_11_synt[2])
  );
  (* src = "synth_mux4x2_8bits.v:47" *)
  DFF _199_ (
    .C(clk_2f),
    .D(_001_[3]),
    .Q(data_11_synt[3])
  );
  (* src = "synth_mux4x2_8bits.v:47" *)
  DFF _200_ (
    .C(clk_2f),
    .D(_001_[4]),
    .Q(data_11_synt[4])
  );
  (* src = "synth_mux4x2_8bits.v:47" *)
  DFF _201_ (
    .C(clk_2f),
    .D(_001_[5]),
    .Q(data_11_synt[5])
  );
  (* src = "synth_mux4x2_8bits.v:47" *)
  DFF _202_ (
    .C(clk_2f),
    .D(_001_[6]),
    .Q(data_11_synt[6])
  );
  (* src = "synth_mux4x2_8bits.v:47" *)
  DFF _203_ (
    .C(clk_2f),
    .D(_001_[7]),
    .Q(data_11_synt[7])
  );
  (* src = "synth_mux4x2_8bits.v:47" *)
  DFF _204_ (
    .C(clk_2f),
    .D(_004_),
    .Q(valid_00_synt)
  );
  (* src = "synth_mux4x2_8bits.v:47" *)
  DFF _205_ (
    .C(clk_2f),
    .D(_005_),
    .Q(valid_11_synt)
  );
  (* src = "synth_mux4x2_8bits.v:36" *)
  DFF _206_ (
    .C(_006_),
    .D(_002_[0]),
    .Q(paq_00[0])
  );
  (* src = "synth_mux4x2_8bits.v:36" *)
  DFF _207_ (
    .C(_007_),
    .D(_002_[1]),
    .Q(paq_00[1])
  );
  (* src = "synth_mux4x2_8bits.v:36" *)
  DFF _208_ (
    .C(_008_),
    .D(_002_[2]),
    .Q(paq_00[2])
  );
  (* src = "synth_mux4x2_8bits.v:36" *)
  DFF _209_ (
    .C(_009_),
    .D(_002_[3]),
    .Q(paq_00[3])
  );
  (* src = "synth_mux4x2_8bits.v:36" *)
  DFF _210_ (
    .C(_010_),
    .D(_002_[4]),
    .Q(paq_00[4])
  );
  (* src = "synth_mux4x2_8bits.v:36" *)
  DFF _211_ (
    .C(_011_),
    .D(_002_[5]),
    .Q(paq_00[5])
  );
  (* src = "synth_mux4x2_8bits.v:36" *)
  DFF _212_ (
    .C(_012_),
    .D(_002_[6]),
    .Q(paq_00[6])
  );
  (* src = "synth_mux4x2_8bits.v:36" *)
  DFF _213_ (
    .C(_013_),
    .D(_002_[7]),
    .Q(paq_00[7])
  );
  (* src = "synth_mux4x2_8bits.v:36" *)
  DFF _214_ (
    .C(_014_),
    .D(_002_[8]),
    .Q(paq_00[8])
  );
  (* src = "synth_mux4x2_8bits.v:36" *)
  DFF _215_ (
    .C(_015_),
    .D(_003_[0]),
    .Q(paq_11[0])
  );
  (* src = "synth_mux4x2_8bits.v:36" *)
  DFF _216_ (
    .C(_016_),
    .D(_003_[1]),
    .Q(paq_11[1])
  );
  (* src = "synth_mux4x2_8bits.v:36" *)
  DFF _217_ (
    .C(_017_),
    .D(_003_[2]),
    .Q(paq_11[2])
  );
  (* src = "synth_mux4x2_8bits.v:36" *)
  DFF _218_ (
    .C(_018_),
    .D(_003_[3]),
    .Q(paq_11[3])
  );
  (* src = "synth_mux4x2_8bits.v:36" *)
  DFF _219_ (
    .C(_019_),
    .D(_003_[4]),
    .Q(paq_11[4])
  );
  (* src = "synth_mux4x2_8bits.v:36" *)
  DFF _220_ (
    .C(_020_),
    .D(_003_[5]),
    .Q(paq_11[5])
  );
  (* src = "synth_mux4x2_8bits.v:36" *)
  DFF _221_ (
    .C(_021_),
    .D(_003_[6]),
    .Q(paq_11[6])
  );
  (* src = "synth_mux4x2_8bits.v:36" *)
  DFF _222_ (
    .C(_022_),
    .D(_003_[7]),
    .Q(paq_11[7])
  );
  (* src = "synth_mux4x2_8bits.v:36" *)
  DFF _223_ (
    .C(_023_),
    .D(_003_[8]),
    .Q(paq_11[8])
  );
  (* src = "synth_mux4x2_8bits.v:25" *)
  DFF _224_ (
    .C(clk_2f),
    .D(reset),
    .Q(reset_s)
  );
  assign paq_0_x = { data_0_synt, valid_0_synt };
  assign paq_1_x = { data_1_synt, valid_1_synt };
  assign paq_2_x = { data_2_synt, valid_2_synt };
  assign paq_3_x = { data_3_synt, valid_3_synt };
endmodule

(* src = "synth_paralelo_serial1.v:1" *)
module synth_paralelo_serial1(data_out_synt, data_000_synt, clk_32f, clk_4f, valid_000_synt, reset);
  (* src = "synth_paralelo_serial1.v:14" *)
  wire [2:0] _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire _38_;
  wire _39_;
  wire _40_;
  wire _41_;
  wire _42_;
  wire _43_;
  (* src = "synth_paralelo_serial1.v:3" *)
  input clk_32f;
  (* src = "synth_paralelo_serial1.v:3" *)
  input clk_4f;
  (* src = "synth_paralelo_serial1.v:7" *)
  wire [2:0] counter;
  (* src = "synth_paralelo_serial1.v:2" *)
  input [7:0] data_000_synt;
  (* src = "synth_paralelo_serial1.v:1" *)
  output data_out_synt;
  (* src = "synth_paralelo_serial1.v:4" *)
  input reset;
  (* src = "synth_paralelo_serial1.v:8" *)
  wire reset_s;
  (* src = "synth_paralelo_serial1.v:4" *)
  input valid_000_synt;
  NOT _44_ (
    .A(reset_s),
    .Y(_01_)
  );
  NOT _45_ (
    .A(data_000_synt[0]),
    .Y(_02_)
  );
  NOT _46_ (
    .A(data_000_synt[1]),
    .Y(_03_)
  );
  NOT _47_ (
    .A(data_000_synt[4]),
    .Y(_04_)
  );
  NOT _48_ (
    .A(data_000_synt[5]),
    .Y(_05_)
  );
  NOT _49_ (
    .A(counter[2]),
    .Y(_06_)
  );
  NOT _50_ (
    .A(counter[1]),
    .Y(_07_)
  );
  NOT _51_ (
    .A(counter[0]),
    .Y(_08_)
  );
  NOR _52_ (
    .A(_01_),
    .B(counter[0]),
    .Y(_00_[0])
  );
  NAND _53_ (
    .A(counter[1]),
    .B(counter[0]),
    .Y(_09_)
  );
  NOT _54_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _55_ (
    .A(counter[1]),
    .B(counter[0]),
    .Y(_11_)
  );
  NOT _56_ (
    .A(_11_),
    .Y(_12_)
  );
  NAND _57_ (
    .A(reset_s),
    .B(_12_),
    .Y(_13_)
  );
  NOR _58_ (
    .A(_10_),
    .B(_13_),
    .Y(_00_[1])
  );
  NOR _59_ (
    .A(_06_),
    .B(_09_),
    .Y(_14_)
  );
  NAND _60_ (
    .A(_06_),
    .B(_09_),
    .Y(_15_)
  );
  NAND _61_ (
    .A(reset_s),
    .B(_15_),
    .Y(_16_)
  );
  NOR _62_ (
    .A(_14_),
    .B(_16_),
    .Y(_00_[2])
  );
  NAND _63_ (
    .A(reset_s),
    .B(valid_000_synt),
    .Y(_17_)
  );
  NOT _64_ (
    .A(_17_),
    .Y(_18_)
  );
  NOR _65_ (
    .A(_06_),
    .B(_17_),
    .Y(_19_)
  );
  NAND _66_ (
    .A(data_000_synt[6]),
    .B(_19_),
    .Y(_20_)
  );
  NOR _67_ (
    .A(data_000_synt[2]),
    .B(_17_),
    .Y(_21_)
  );
  NOR _68_ (
    .A(counter[2]),
    .B(_21_),
    .Y(_22_)
  );
  NOR _69_ (
    .A(counter[0]),
    .B(_22_),
    .Y(_23_)
  );
  NAND _70_ (
    .A(_20_),
    .B(_23_),
    .Y(_24_)
  );
  NOR _71_ (
    .A(data_000_synt[7]),
    .B(_06_),
    .Y(_25_)
  );
  NOR _72_ (
    .A(data_000_synt[3]),
    .B(counter[2]),
    .Y(_26_)
  );
  NOR _73_ (
    .A(_25_),
    .B(_26_),
    .Y(_27_)
  );
  NAND _74_ (
    .A(counter[0]),
    .B(_18_),
    .Y(_28_)
  );
  NOR _75_ (
    .A(_27_),
    .B(_28_),
    .Y(_29_)
  );
  NOR _76_ (
    .A(_07_),
    .B(_29_),
    .Y(_30_)
  );
  NAND _77_ (
    .A(_24_),
    .B(_30_),
    .Y(_31_)
  );
  NAND _78_ (
    .A(_05_),
    .B(_19_),
    .Y(_32_)
  );
  NOR _79_ (
    .A(_03_),
    .B(_17_),
    .Y(_33_)
  );
  NOR _80_ (
    .A(counter[2]),
    .B(_33_),
    .Y(_34_)
  );
  NOR _81_ (
    .A(counter[1]),
    .B(_08_),
    .Y(_35_)
  );
  NAND _82_ (
    .A(_32_),
    .B(_35_),
    .Y(_36_)
  );
  NOR _83_ (
    .A(_34_),
    .B(_36_),
    .Y(_37_)
  );
  NOR _84_ (
    .A(_02_),
    .B(_17_),
    .Y(_38_)
  );
  NOR _85_ (
    .A(counter[2]),
    .B(_38_),
    .Y(_39_)
  );
  NAND _86_ (
    .A(_04_),
    .B(_19_),
    .Y(_40_)
  );
  NAND _87_ (
    .A(_11_),
    .B(_40_),
    .Y(_41_)
  );
  NOR _88_ (
    .A(_39_),
    .B(_41_),
    .Y(_42_)
  );
  NOR _89_ (
    .A(_37_),
    .B(_42_),
    .Y(_43_)
  );
  NAND _90_ (
    .A(_31_),
    .B(_43_),
    .Y(data_out_synt)
  );
  (* src = "synth_paralelo_serial1.v:14" *)
  DFF _91_ (
    .C(clk_32f),
    .D(_00_[0]),
    .Q(counter[0])
  );
  (* src = "synth_paralelo_serial1.v:14" *)
  DFF _92_ (
    .C(clk_32f),
    .D(_00_[1]),
    .Q(counter[1])
  );
  (* src = "synth_paralelo_serial1.v:14" *)
  DFF _93_ (
    .C(clk_32f),
    .D(_00_[2]),
    .Q(counter[2])
  );
  (* src = "synth_paralelo_serial1.v:10" *)
  DFF _94_ (
    .C(clk_4f),
    .D(reset),
    .Q(reset_s)
  );
endmodule

(* src = "synth_paralelo_serial2.v:1" *)
module synth_paralelo_serial2(inserter_synt, clk_4f, clk_32f, reset, active_synt);
  (* src = "synth_paralelo_serial2.v:30" *)
  wire [2:0] _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  (* src = "synth_paralelo_serial2.v:5" *)
  (* unused_bits = "6 7" *)
  wire [7:0] IDLE_COM;
  (* src = "synth_paralelo_serial2.v:3" *)
  input active_synt;
  (* src = "synth_paralelo_serial2.v:2" *)
  input clk_32f;
  (* src = "synth_paralelo_serial2.v:2" *)
  input clk_4f;
  (* src = "synth_paralelo_serial2.v:6" *)
  wire [2:0] counter;
  (* src = "synth_paralelo_serial2.v:1" *)
  output inserter_synt;
  (* src = "synth_paralelo_serial2.v:3" *)
  input reset;
  (* src = "synth_paralelo_serial2.v:7" *)
  wire reset_s;
  NOT _20_ (
    .A(reset_s),
    .Y(_01_)
  );
  NOT _21_ (
    .A(counter[2]),
    .Y(_02_)
  );
  NAND _22_ (
    .A(counter[0]),
    .B(counter[1]),
    .Y(_03_)
  );
  NOT _23_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _24_ (
    .A(counter[0]),
    .B(counter[1]),
    .Y(_05_)
  );
  NOT _25_ (
    .A(_05_),
    .Y(_06_)
  );
  NAND _26_ (
    .A(reset_s),
    .B(_06_),
    .Y(_07_)
  );
  NOR _27_ (
    .A(_04_),
    .B(_07_),
    .Y(_00_[1])
  );
  NAND _28_ (
    .A(_02_),
    .B(_03_),
    .Y(_08_)
  );
  NAND _29_ (
    .A(reset_s),
    .B(_08_),
    .Y(_09_)
  );
  NAND _30_ (
    .A(counter[1]),
    .B(counter[2]),
    .Y(_10_)
  );
  NOR _31_ (
    .A(_02_),
    .B(_03_),
    .Y(_11_)
  );
  NOR _32_ (
    .A(_09_),
    .B(_11_),
    .Y(_00_[2])
  );
  NAND _33_ (
    .A(active_synt),
    .B(counter[0]),
    .Y(_12_)
  );
  NOT _34_ (
    .A(_12_),
    .Y(_13_)
  );
  NOR _35_ (
    .A(active_synt),
    .B(counter[0]),
    .Y(_14_)
  );
  NOR _36_ (
    .A(_13_),
    .B(_14_),
    .Y(_15_)
  );
  NOR _37_ (
    .A(_10_),
    .B(_15_),
    .Y(_16_)
  );
  NOR _38_ (
    .A(counter[1]),
    .B(counter[2]),
    .Y(_17_)
  );
  NOT _39_ (
    .A(_17_),
    .Y(_18_)
  );
  NAND _40_ (
    .A(reset_s),
    .B(_18_),
    .Y(_19_)
  );
  NOR _41_ (
    .A(_16_),
    .B(_19_),
    .Y(inserter_synt)
  );
  NOR _42_ (
    .A(_01_),
    .B(counter[0]),
    .Y(_00_[0])
  );
  (* src = "synth_paralelo_serial2.v:30" *)
  DFF _43_ (
    .C(clk_32f),
    .D(_00_[0]),
    .Q(counter[0])
  );
  (* src = "synth_paralelo_serial2.v:30" *)
  DFF _44_ (
    .C(clk_32f),
    .D(_00_[1]),
    .Q(counter[1])
  );
  (* src = "synth_paralelo_serial2.v:30" *)
  DFF _45_ (
    .C(clk_32f),
    .D(_00_[2]),
    .Q(counter[2])
  );
  (* src = "synth_paralelo_serial2.v:26" *)
  DFF _46_ (
    .C(clk_4f),
    .D(reset),
    .Q(reset_s)
  );
  assign IDLE_COM[5:0] = { reset_s, reset_s, reset_s, reset_s, 2'h0 };
endmodule

(* src = "synth_recirculacion.v:11" *)
module synth_recirculacion(data_0rf_synt, data_1rf_synt, data_2rf_synt, data_3rf_synt, valid_0rf_synt, valid_1rf_synt, valid_2rf_synt, valid_3rf_synt, data_0rp_synt, data_1rp_synt, data_2rp_synt, data_3rp_synt, valid_0rp_synt, valid_1rp_synt, valid_2rp_synt, valid_3rp_synt, data_0ps_synt, data_1ps_synt, data_2ps_synt, data_3ps_synt, valid_0ps_synt, valid_1ps_synt, valid_2ps_synt, valid_3ps_synt, IDLE_OUT_synt);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  (* src = "synth_recirculacion.v:21" *)
  input IDLE_OUT_synt;
  (* src = "synth_recirculacion.v:19" *)
  input [7:0] data_0ps_synt;
  (* src = "synth_recirculacion.v:11" *)
  output [7:0] data_0rf_synt;
  (* src = "synth_recirculacion.v:15" *)
  output [7:0] data_0rp_synt;
  (* src = "synth_recirculacion.v:19" *)
  input [7:0] data_1ps_synt;
  (* src = "synth_recirculacion.v:11" *)
  output [7:0] data_1rf_synt;
  (* src = "synth_recirculacion.v:15" *)
  output [7:0] data_1rp_synt;
  (* src = "synth_recirculacion.v:19" *)
  input [7:0] data_2ps_synt;
  (* src = "synth_recirculacion.v:12" *)
  output [7:0] data_2rf_synt;
  (* src = "synth_recirculacion.v:16" *)
  output [7:0] data_2rp_synt;
  (* src = "synth_recirculacion.v:19" *)
  input [7:0] data_3ps_synt;
  (* src = "synth_recirculacion.v:12" *)
  output [7:0] data_3rf_synt;
  (* src = "synth_recirculacion.v:16" *)
  output [7:0] data_3rp_synt;
  (* src = "synth_recirculacion.v:20" *)
  input valid_0ps_synt;
  (* src = "synth_recirculacion.v:13" *)
  output valid_0rf_synt;
  (* src = "synth_recirculacion.v:17" *)
  output valid_0rp_synt;
  (* src = "synth_recirculacion.v:20" *)
  input valid_1ps_synt;
  (* src = "synth_recirculacion.v:13" *)
  output valid_1rf_synt;
  (* src = "synth_recirculacion.v:17" *)
  output valid_1rp_synt;
  (* src = "synth_recirculacion.v:20" *)
  input valid_2ps_synt;
  (* src = "synth_recirculacion.v:14" *)
  output valid_2rf_synt;
  (* src = "synth_recirculacion.v:18" *)
  output valid_2rp_synt;
  (* src = "synth_recirculacion.v:20" *)
  input valid_3ps_synt;
  (* src = "synth_recirculacion.v:14" *)
  output valid_3rf_synt;
  (* src = "synth_recirculacion.v:18" *)
  output valid_3rp_synt;
  NOT _072_ (
    .A(valid_2ps_synt),
    .Y(_000_)
  );
  NOT _073_ (
    .A(valid_3ps_synt),
    .Y(_001_)
  );
  NOT _074_ (
    .A(data_3ps_synt[0]),
    .Y(_002_)
  );
  NOT _075_ (
    .A(data_3ps_synt[1]),
    .Y(_003_)
  );
  NOT _076_ (
    .A(data_3ps_synt[2]),
    .Y(_004_)
  );
  NOT _077_ (
    .A(data_3ps_synt[3]),
    .Y(_005_)
  );
  NOT _078_ (
    .A(data_3ps_synt[4]),
    .Y(_006_)
  );
  NOT _079_ (
    .A(data_3ps_synt[5]),
    .Y(_007_)
  );
  NOT _080_ (
    .A(data_3ps_synt[6]),
    .Y(_008_)
  );
  NOT _081_ (
    .A(data_3ps_synt[7]),
    .Y(_009_)
  );
  NOT _082_ (
    .A(data_1ps_synt[0]),
    .Y(_010_)
  );
  NOT _083_ (
    .A(data_1ps_synt[1]),
    .Y(_011_)
  );
  NOT _084_ (
    .A(data_1ps_synt[2]),
    .Y(_012_)
  );
  NOT _085_ (
    .A(data_1ps_synt[3]),
    .Y(_013_)
  );
  NOT _086_ (
    .A(data_1ps_synt[4]),
    .Y(_014_)
  );
  NOT _087_ (
    .A(data_1ps_synt[5]),
    .Y(_015_)
  );
  NOT _088_ (
    .A(data_1ps_synt[6]),
    .Y(_016_)
  );
  NOT _089_ (
    .A(data_1ps_synt[7]),
    .Y(_017_)
  );
  NOT _090_ (
    .A(data_2ps_synt[0]),
    .Y(_018_)
  );
  NOT _091_ (
    .A(data_2ps_synt[1]),
    .Y(_019_)
  );
  NOT _092_ (
    .A(data_2ps_synt[2]),
    .Y(_020_)
  );
  NOT _093_ (
    .A(data_2ps_synt[3]),
    .Y(_021_)
  );
  NOT _094_ (
    .A(data_2ps_synt[4]),
    .Y(_022_)
  );
  NOT _095_ (
    .A(data_2ps_synt[5]),
    .Y(_023_)
  );
  NOT _096_ (
    .A(data_2ps_synt[6]),
    .Y(_024_)
  );
  NOT _097_ (
    .A(data_2ps_synt[7]),
    .Y(_025_)
  );
  NOT _098_ (
    .A(valid_1ps_synt),
    .Y(_026_)
  );
  NOT _099_ (
    .A(valid_0ps_synt),
    .Y(_027_)
  );
  NOT _100_ (
    .A(data_0ps_synt[0]),
    .Y(_028_)
  );
  NOT _101_ (
    .A(data_0ps_synt[1]),
    .Y(_029_)
  );
  NOT _102_ (
    .A(data_0ps_synt[2]),
    .Y(_030_)
  );
  NOT _103_ (
    .A(data_0ps_synt[3]),
    .Y(_031_)
  );
  NOT _104_ (
    .A(data_0ps_synt[4]),
    .Y(_032_)
  );
  NOT _105_ (
    .A(data_0ps_synt[5]),
    .Y(_033_)
  );
  NOT _106_ (
    .A(data_0ps_synt[6]),
    .Y(_034_)
  );
  NOT _107_ (
    .A(data_0ps_synt[7]),
    .Y(_035_)
  );
  NOR _108_ (
    .A(_000_),
    .B(IDLE_OUT_synt),
    .Y(valid_2rp_synt)
  );
  NOR _109_ (
    .A(IDLE_OUT_synt),
    .B(_001_),
    .Y(valid_3rp_synt)
  );
  NOR _110_ (
    .A(IDLE_OUT_synt),
    .B(_002_),
    .Y(data_3rp_synt[0])
  );
  NOR _111_ (
    .A(IDLE_OUT_synt),
    .B(_003_),
    .Y(data_3rp_synt[1])
  );
  NOR _112_ (
    .A(IDLE_OUT_synt),
    .B(_004_),
    .Y(data_3rp_synt[2])
  );
  NOR _113_ (
    .A(IDLE_OUT_synt),
    .B(_005_),
    .Y(data_3rp_synt[3])
  );
  NOR _114_ (
    .A(IDLE_OUT_synt),
    .B(_006_),
    .Y(data_3rp_synt[4])
  );
  NOR _115_ (
    .A(IDLE_OUT_synt),
    .B(_007_),
    .Y(data_3rp_synt[5])
  );
  NOR _116_ (
    .A(IDLE_OUT_synt),
    .B(_008_),
    .Y(data_3rp_synt[6])
  );
  NOR _117_ (
    .A(IDLE_OUT_synt),
    .B(_009_),
    .Y(data_3rp_synt[7])
  );
  NOR _118_ (
    .A(IDLE_OUT_synt),
    .B(_010_),
    .Y(data_1rp_synt[0])
  );
  NOR _119_ (
    .A(IDLE_OUT_synt),
    .B(_011_),
    .Y(data_1rp_synt[1])
  );
  NOR _120_ (
    .A(IDLE_OUT_synt),
    .B(_012_),
    .Y(data_1rp_synt[2])
  );
  NOR _121_ (
    .A(IDLE_OUT_synt),
    .B(_013_),
    .Y(data_1rp_synt[3])
  );
  NOR _122_ (
    .A(IDLE_OUT_synt),
    .B(_014_),
    .Y(data_1rp_synt[4])
  );
  NOR _123_ (
    .A(IDLE_OUT_synt),
    .B(_015_),
    .Y(data_1rp_synt[5])
  );
  NOR _124_ (
    .A(IDLE_OUT_synt),
    .B(_016_),
    .Y(data_1rp_synt[6])
  );
  NOR _125_ (
    .A(IDLE_OUT_synt),
    .B(_017_),
    .Y(data_1rp_synt[7])
  );
  NOR _126_ (
    .A(IDLE_OUT_synt),
    .B(_018_),
    .Y(data_2rp_synt[0])
  );
  NOR _127_ (
    .A(IDLE_OUT_synt),
    .B(_019_),
    .Y(data_2rp_synt[1])
  );
  NOR _128_ (
    .A(IDLE_OUT_synt),
    .B(_020_),
    .Y(data_2rp_synt[2])
  );
  NOR _129_ (
    .A(IDLE_OUT_synt),
    .B(_021_),
    .Y(data_2rp_synt[3])
  );
  NOR _130_ (
    .A(IDLE_OUT_synt),
    .B(_022_),
    .Y(data_2rp_synt[4])
  );
  NOR _131_ (
    .A(IDLE_OUT_synt),
    .B(_023_),
    .Y(data_2rp_synt[5])
  );
  NOR _132_ (
    .A(IDLE_OUT_synt),
    .B(_024_),
    .Y(data_2rp_synt[6])
  );
  NOR _133_ (
    .A(IDLE_OUT_synt),
    .B(_025_),
    .Y(data_2rp_synt[7])
  );
  NOR _134_ (
    .A(IDLE_OUT_synt),
    .B(_026_),
    .Y(valid_1rp_synt)
  );
  NAND _135_ (
    .A(IDLE_OUT_synt),
    .B(valid_3ps_synt),
    .Y(_036_)
  );
  NOT _136_ (
    .A(_036_),
    .Y(valid_3rf_synt)
  );
  NOR _137_ (
    .A(IDLE_OUT_synt),
    .B(_027_),
    .Y(valid_0rp_synt)
  );
  NOR _138_ (
    .A(IDLE_OUT_synt),
    .B(_028_),
    .Y(data_0rp_synt[0])
  );
  NOR _139_ (
    .A(IDLE_OUT_synt),
    .B(_029_),
    .Y(data_0rp_synt[1])
  );
  NOR _140_ (
    .A(IDLE_OUT_synt),
    .B(_030_),
    .Y(data_0rp_synt[2])
  );
  NOR _141_ (
    .A(IDLE_OUT_synt),
    .B(_031_),
    .Y(data_0rp_synt[3])
  );
  NOR _142_ (
    .A(IDLE_OUT_synt),
    .B(_032_),
    .Y(data_0rp_synt[4])
  );
  NOR _143_ (
    .A(IDLE_OUT_synt),
    .B(_033_),
    .Y(data_0rp_synt[5])
  );
  NOR _144_ (
    .A(IDLE_OUT_synt),
    .B(_034_),
    .Y(data_0rp_synt[6])
  );
  NOR _145_ (
    .A(IDLE_OUT_synt),
    .B(_035_),
    .Y(data_0rp_synt[7])
  );
  NAND _146_ (
    .A(IDLE_OUT_synt),
    .B(data_2ps_synt[0]),
    .Y(_037_)
  );
  NOT _147_ (
    .A(_037_),
    .Y(data_2rf_synt[0])
  );
  NAND _148_ (
    .A(IDLE_OUT_synt),
    .B(data_2ps_synt[1]),
    .Y(_038_)
  );
  NOT _149_ (
    .A(_038_),
    .Y(data_2rf_synt[1])
  );
  NAND _150_ (
    .A(IDLE_OUT_synt),
    .B(data_2ps_synt[2]),
    .Y(_039_)
  );
  NOT _151_ (
    .A(_039_),
    .Y(data_2rf_synt[2])
  );
  NAND _152_ (
    .A(IDLE_OUT_synt),
    .B(data_2ps_synt[3]),
    .Y(_040_)
  );
  NOT _153_ (
    .A(_040_),
    .Y(data_2rf_synt[3])
  );
  NAND _154_ (
    .A(IDLE_OUT_synt),
    .B(data_2ps_synt[4]),
    .Y(_041_)
  );
  NOT _155_ (
    .A(_041_),
    .Y(data_2rf_synt[4])
  );
  NAND _156_ (
    .A(IDLE_OUT_synt),
    .B(data_2ps_synt[5]),
    .Y(_042_)
  );
  NOT _157_ (
    .A(_042_),
    .Y(data_2rf_synt[5])
  );
  NAND _158_ (
    .A(IDLE_OUT_synt),
    .B(data_2ps_synt[6]),
    .Y(_043_)
  );
  NOT _159_ (
    .A(_043_),
    .Y(data_2rf_synt[6])
  );
  NAND _160_ (
    .A(IDLE_OUT_synt),
    .B(data_2ps_synt[7]),
    .Y(_044_)
  );
  NOT _161_ (
    .A(_044_),
    .Y(data_2rf_synt[7])
  );
  NAND _162_ (
    .A(IDLE_OUT_synt),
    .B(data_3ps_synt[0]),
    .Y(_045_)
  );
  NOT _163_ (
    .A(_045_),
    .Y(data_3rf_synt[0])
  );
  NAND _164_ (
    .A(IDLE_OUT_synt),
    .B(data_3ps_synt[1]),
    .Y(_046_)
  );
  NOT _165_ (
    .A(_046_),
    .Y(data_3rf_synt[1])
  );
  NAND _166_ (
    .A(IDLE_OUT_synt),
    .B(data_3ps_synt[2]),
    .Y(_047_)
  );
  NOT _167_ (
    .A(_047_),
    .Y(data_3rf_synt[2])
  );
  NAND _168_ (
    .A(IDLE_OUT_synt),
    .B(data_3ps_synt[3]),
    .Y(_048_)
  );
  NOT _169_ (
    .A(_048_),
    .Y(data_3rf_synt[3])
  );
  NAND _170_ (
    .A(IDLE_OUT_synt),
    .B(data_3ps_synt[4]),
    .Y(_049_)
  );
  NOT _171_ (
    .A(_049_),
    .Y(data_3rf_synt[4])
  );
  NAND _172_ (
    .A(IDLE_OUT_synt),
    .B(data_3ps_synt[5]),
    .Y(_050_)
  );
  NOT _173_ (
    .A(_050_),
    .Y(data_3rf_synt[5])
  );
  NAND _174_ (
    .A(IDLE_OUT_synt),
    .B(data_3ps_synt[6]),
    .Y(_051_)
  );
  NOT _175_ (
    .A(_051_),
    .Y(data_3rf_synt[6])
  );
  NAND _176_ (
    .A(IDLE_OUT_synt),
    .B(data_3ps_synt[7]),
    .Y(_052_)
  );
  NOT _177_ (
    .A(_052_),
    .Y(data_3rf_synt[7])
  );
  NAND _178_ (
    .A(valid_2ps_synt),
    .B(IDLE_OUT_synt),
    .Y(_053_)
  );
  NOT _179_ (
    .A(_053_),
    .Y(valid_2rf_synt)
  );
  NAND _180_ (
    .A(IDLE_OUT_synt),
    .B(valid_0ps_synt),
    .Y(_054_)
  );
  NOT _181_ (
    .A(_054_),
    .Y(valid_0rf_synt)
  );
  NAND _182_ (
    .A(IDLE_OUT_synt),
    .B(valid_1ps_synt),
    .Y(_055_)
  );
  NOT _183_ (
    .A(_055_),
    .Y(valid_1rf_synt)
  );
  NAND _184_ (
    .A(IDLE_OUT_synt),
    .B(data_1ps_synt[0]),
    .Y(_056_)
  );
  NOT _185_ (
    .A(_056_),
    .Y(data_1rf_synt[0])
  );
  NAND _186_ (
    .A(IDLE_OUT_synt),
    .B(data_1ps_synt[1]),
    .Y(_057_)
  );
  NOT _187_ (
    .A(_057_),
    .Y(data_1rf_synt[1])
  );
  NAND _188_ (
    .A(IDLE_OUT_synt),
    .B(data_1ps_synt[2]),
    .Y(_058_)
  );
  NOT _189_ (
    .A(_058_),
    .Y(data_1rf_synt[2])
  );
  NAND _190_ (
    .A(IDLE_OUT_synt),
    .B(data_1ps_synt[3]),
    .Y(_059_)
  );
  NOT _191_ (
    .A(_059_),
    .Y(data_1rf_synt[3])
  );
  NAND _192_ (
    .A(IDLE_OUT_synt),
    .B(data_1ps_synt[4]),
    .Y(_060_)
  );
  NOT _193_ (
    .A(_060_),
    .Y(data_1rf_synt[4])
  );
  NAND _194_ (
    .A(IDLE_OUT_synt),
    .B(data_1ps_synt[5]),
    .Y(_061_)
  );
  NOT _195_ (
    .A(_061_),
    .Y(data_1rf_synt[5])
  );
  NAND _196_ (
    .A(IDLE_OUT_synt),
    .B(data_1ps_synt[6]),
    .Y(_062_)
  );
  NOT _197_ (
    .A(_062_),
    .Y(data_1rf_synt[6])
  );
  NAND _198_ (
    .A(IDLE_OUT_synt),
    .B(data_1ps_synt[7]),
    .Y(_063_)
  );
  NOT _199_ (
    .A(_063_),
    .Y(data_1rf_synt[7])
  );
  NAND _200_ (
    .A(IDLE_OUT_synt),
    .B(data_0ps_synt[0]),
    .Y(_064_)
  );
  NOT _201_ (
    .A(_064_),
    .Y(data_0rf_synt[0])
  );
  NAND _202_ (
    .A(IDLE_OUT_synt),
    .B(data_0ps_synt[1]),
    .Y(_065_)
  );
  NOT _203_ (
    .A(_065_),
    .Y(data_0rf_synt[1])
  );
  NAND _204_ (
    .A(IDLE_OUT_synt),
    .B(data_0ps_synt[2]),
    .Y(_066_)
  );
  NOT _205_ (
    .A(_066_),
    .Y(data_0rf_synt[2])
  );
  NAND _206_ (
    .A(IDLE_OUT_synt),
    .B(data_0ps_synt[3]),
    .Y(_067_)
  );
  NOT _207_ (
    .A(_067_),
    .Y(data_0rf_synt[3])
  );
  NAND _208_ (
    .A(IDLE_OUT_synt),
    .B(data_0ps_synt[4]),
    .Y(_068_)
  );
  NOT _209_ (
    .A(_068_),
    .Y(data_0rf_synt[4])
  );
  NAND _210_ (
    .A(IDLE_OUT_synt),
    .B(data_0ps_synt[5]),
    .Y(_069_)
  );
  NOT _211_ (
    .A(_069_),
    .Y(data_0rf_synt[5])
  );
  NAND _212_ (
    .A(IDLE_OUT_synt),
    .B(data_0ps_synt[6]),
    .Y(_070_)
  );
  NOT _213_ (
    .A(_070_),
    .Y(data_0rf_synt[6])
  );
  NAND _214_ (
    .A(IDLE_OUT_synt),
    .B(data_0ps_synt[7]),
    .Y(_071_)
  );
  NOT _215_ (
    .A(_071_),
    .Y(data_0rf_synt[7])
  );
endmodule

(* src = "synth_serial_paralelo1.v:1" *)
module synth_serial_paralelo1(data_rx000_synt, valid_rx000_synt, active_synt, data_out_synt, reset, clk_4f, clk_32f);
  (* src = "synth_serial_paralelo1.v:40" *)
  wire [2:0] _000_;
  (* src = "synth_serial_paralelo1.v:30" *)
  wire [7:0] _001_;
  (* src = "synth_serial_paralelo1.v:19" *)
  wire [2:0] _002_;
  (* src = "synth_serial_paralelo1.v:65" *)
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  (* src = "synth_serial_paralelo1.v:9" *)
  wire [2:0] BC_counter;
  (* src = "synth_serial_paralelo1.v:2" *)
  output active_synt;
  (* src = "synth_serial_paralelo1.v:4" *)
  input clk_32f;
  (* src = "synth_serial_paralelo1.v:4" *)
  input clk_4f;
  (* src = "synth_serial_paralelo1.v:8" *)
  wire [7:0] container;
  (* src = "synth_serial_paralelo1.v:7" *)
  wire [2:0] counter;
  (* src = "synth_serial_paralelo1.v:3" *)
  input data_out_synt;
  (* src = "synth_serial_paralelo1.v:1" *)
  output [7:0] data_rx000_synt;
  (* src = "synth_serial_paralelo1.v:3" *)
  input reset;
  (* src = "synth_serial_paralelo1.v:6" *)
  wire reset_s;
  (* src = "synth_serial_paralelo1.v:2" *)
  output valid_rx000_synt;
  NOT _081_ (
    .A(container[0]),
    .Y(_033_)
  );
  NOT _082_ (
    .A(container[1]),
    .Y(_034_)
  );
  NOT _083_ (
    .A(container[6]),
    .Y(_035_)
  );
  NOT _084_ (
    .A(counter[2]),
    .Y(_036_)
  );
  NOT _085_ (
    .A(counter[0]),
    .Y(_037_)
  );
  NOT _086_ (
    .A(reset_s),
    .Y(_038_)
  );
  NOT _087_ (
    .A(BC_counter[1]),
    .Y(_039_)
  );
  NOT _088_ (
    .A(BC_counter[2]),
    .Y(_040_)
  );
  NOT _089_ (
    .A(data_out_synt),
    .Y(_041_)
  );
  NOT _090_ (
    .A(container[7]),
    .Y(_042_)
  );
  NOT _091_ (
    .A(container[2]),
    .Y(_043_)
  );
  NOT _092_ (
    .A(clk_32f),
    .Y(_004_)
  );
  NAND _093_ (
    .A(_039_),
    .B(BC_counter[2]),
    .Y(_044_)
  );
  NOR _094_ (
    .A(BC_counter[0]),
    .B(_044_),
    .Y(active_synt)
  );
  NAND _095_ (
    .A(container[5]),
    .B(container[4]),
    .Y(_045_)
  );
  NAND _096_ (
    .A(container[3]),
    .B(container[2]),
    .Y(_046_)
  );
  NOR _097_ (
    .A(_045_),
    .B(_046_),
    .Y(_047_)
  );
  NAND _098_ (
    .A(_033_),
    .B(_034_),
    .Y(_048_)
  );
  NAND _099_ (
    .A(_035_),
    .B(container[7]),
    .Y(_049_)
  );
  NOR _100_ (
    .A(_048_),
    .B(_049_),
    .Y(_050_)
  );
  NAND _101_ (
    .A(_047_),
    .B(_050_),
    .Y(_051_)
  );
  NAND _102_ (
    .A(reset),
    .B(_051_),
    .Y(_052_)
  );
  NOR _103_ (
    .A(_040_),
    .B(_052_),
    .Y(_003_)
  );
  NOR _104_ (
    .A(BC_counter[2]),
    .B(_051_),
    .Y(_053_)
  );
  NAND _105_ (
    .A(BC_counter[0]),
    .B(_053_),
    .Y(_054_)
  );
  NOR _106_ (
    .A(BC_counter[0]),
    .B(_053_),
    .Y(_055_)
  );
  NAND _107_ (
    .A(reset_s),
    .B(_054_),
    .Y(_056_)
  );
  NOR _108_ (
    .A(_055_),
    .B(_056_),
    .Y(_000_[0])
  );
  NOR _109_ (
    .A(_039_),
    .B(_054_),
    .Y(_057_)
  );
  NAND _110_ (
    .A(_039_),
    .B(_054_),
    .Y(_058_)
  );
  NAND _111_ (
    .A(reset_s),
    .B(_058_),
    .Y(_059_)
  );
  NOR _112_ (
    .A(_057_),
    .B(_059_),
    .Y(_000_[1])
  );
  NOR _113_ (
    .A(BC_counter[2]),
    .B(_057_),
    .Y(_060_)
  );
  NOR _114_ (
    .A(_038_),
    .B(_060_),
    .Y(_000_[2])
  );
  NAND _115_ (
    .A(counter[1]),
    .B(counter[0]),
    .Y(_061_)
  );
  NOT _116_ (
    .A(_061_),
    .Y(_062_)
  );
  NAND _117_ (
    .A(counter[2]),
    .B(_062_),
    .Y(_063_)
  );
  NOR _118_ (
    .A(data_out_synt),
    .B(_063_),
    .Y(_064_)
  );
  NOT _119_ (
    .A(_064_),
    .Y(_065_)
  );
  NAND _120_ (
    .A(_042_),
    .B(_063_),
    .Y(_066_)
  );
  NAND _121_ (
    .A(_065_),
    .B(_066_),
    .Y(_067_)
  );
  NAND _122_ (
    .A(reset_s),
    .B(_067_),
    .Y(_001_[7])
  );
  NOR _123_ (
    .A(counter[1]),
    .B(_037_),
    .Y(_068_)
  );
  NAND _124_ (
    .A(counter[2]),
    .B(_068_),
    .Y(_069_)
  );
  NOR _125_ (
    .A(_041_),
    .B(_069_),
    .Y(_070_)
  );
  NAND _126_ (
    .A(container[5]),
    .B(_069_),
    .Y(_071_)
  );
  NOR _127_ (
    .A(_038_),
    .B(_070_),
    .Y(_072_)
  );
  NAND _128_ (
    .A(_071_),
    .B(_072_),
    .Y(_001_[5])
  );
  NOR _129_ (
    .A(counter[1]),
    .B(counter[0]),
    .Y(_073_)
  );
  NAND _130_ (
    .A(counter[2]),
    .B(_073_),
    .Y(_074_)
  );
  NOR _131_ (
    .A(_041_),
    .B(_074_),
    .Y(_075_)
  );
  NAND _132_ (
    .A(container[4]),
    .B(_074_),
    .Y(_076_)
  );
  NOR _133_ (
    .A(_038_),
    .B(_075_),
    .Y(_077_)
  );
  NAND _134_ (
    .A(_076_),
    .B(_077_),
    .Y(_001_[4])
  );
  NAND _135_ (
    .A(_036_),
    .B(_062_),
    .Y(_078_)
  );
  NOR _136_ (
    .A(_041_),
    .B(_078_),
    .Y(_079_)
  );
  NAND _137_ (
    .A(container[3]),
    .B(_078_),
    .Y(_080_)
  );
  NOR _138_ (
    .A(_038_),
    .B(_079_),
    .Y(_012_)
  );
  NAND _139_ (
    .A(_080_),
    .B(_012_),
    .Y(_001_[3])
  );
  NAND _140_ (
    .A(counter[1]),
    .B(_037_),
    .Y(_013_)
  );
  NOR _141_ (
    .A(counter[2]),
    .B(_013_),
    .Y(_014_)
  );
  NAND _142_ (
    .A(data_out_synt),
    .B(_014_),
    .Y(_015_)
  );
  NOR _143_ (
    .A(_043_),
    .B(_014_),
    .Y(_016_)
  );
  NOR _144_ (
    .A(_038_),
    .B(_016_),
    .Y(_017_)
  );
  NAND _145_ (
    .A(_015_),
    .B(_017_),
    .Y(_001_[2])
  );
  NAND _146_ (
    .A(_036_),
    .B(_068_),
    .Y(_018_)
  );
  NAND _147_ (
    .A(_034_),
    .B(_018_),
    .Y(_019_)
  );
  NOR _148_ (
    .A(data_out_synt),
    .B(_018_),
    .Y(_020_)
  );
  NAND _149_ (
    .A(reset_s),
    .B(_019_),
    .Y(_021_)
  );
  NOR _150_ (
    .A(_020_),
    .B(_021_),
    .Y(_001_[1])
  );
  NAND _151_ (
    .A(_036_),
    .B(_073_),
    .Y(_022_)
  );
  NAND _152_ (
    .A(_033_),
    .B(_022_),
    .Y(_023_)
  );
  NOR _153_ (
    .A(data_out_synt),
    .B(_022_),
    .Y(_024_)
  );
  NAND _154_ (
    .A(reset_s),
    .B(_023_),
    .Y(_025_)
  );
  NOR _155_ (
    .A(_024_),
    .B(_025_),
    .Y(_001_[0])
  );
  NOR _156_ (
    .A(_036_),
    .B(_013_),
    .Y(_026_)
  );
  NOR _157_ (
    .A(container[6]),
    .B(_026_),
    .Y(_027_)
  );
  NAND _158_ (
    .A(_041_),
    .B(_026_),
    .Y(_028_)
  );
  NAND _159_ (
    .A(reset_s),
    .B(_028_),
    .Y(_029_)
  );
  NOR _160_ (
    .A(_027_),
    .B(_029_),
    .Y(_001_[6])
  );
  NOR _161_ (
    .A(counter[0]),
    .B(_038_),
    .Y(_002_[0])
  );
  NAND _162_ (
    .A(reset_s),
    .B(_061_),
    .Y(_030_)
  );
  NOR _163_ (
    .A(_073_),
    .B(_030_),
    .Y(_002_[1])
  );
  NOR _164_ (
    .A(counter[2]),
    .B(_062_),
    .Y(_031_)
  );
  NAND _165_ (
    .A(reset_s),
    .B(_063_),
    .Y(_032_)
  );
  NOR _166_ (
    .A(_031_),
    .B(_032_),
    .Y(_002_[2])
  );
  NOT _167_ (
    .A(clk_32f),
    .Y(_005_)
  );
  NOT _168_ (
    .A(clk_32f),
    .Y(_006_)
  );
  NOT _169_ (
    .A(clk_32f),
    .Y(_007_)
  );
  NOT _170_ (
    .A(clk_32f),
    .Y(_008_)
  );
  NOT _171_ (
    .A(clk_32f),
    .Y(_009_)
  );
  NOT _172_ (
    .A(clk_32f),
    .Y(_010_)
  );
  NOT _173_ (
    .A(clk_32f),
    .Y(_011_)
  );
  (* src = "synth_serial_paralelo1.v:84" *)
  DFF _174_ (
    .C(clk_4f),
    .D(container[0]),
    .Q(data_rx000_synt[0])
  );
  (* src = "synth_serial_paralelo1.v:84" *)
  DFF _175_ (
    .C(clk_4f),
    .D(container[1]),
    .Q(data_rx000_synt[1])
  );
  (* src = "synth_serial_paralelo1.v:84" *)
  DFF _176_ (
    .C(clk_4f),
    .D(container[2]),
    .Q(data_rx000_synt[2])
  );
  (* src = "synth_serial_paralelo1.v:84" *)
  DFF _177_ (
    .C(clk_4f),
    .D(container[3]),
    .Q(data_rx000_synt[3])
  );
  (* src = "synth_serial_paralelo1.v:84" *)
  DFF _178_ (
    .C(clk_4f),
    .D(container[4]),
    .Q(data_rx000_synt[4])
  );
  (* src = "synth_serial_paralelo1.v:84" *)
  DFF _179_ (
    .C(clk_4f),
    .D(container[5]),
    .Q(data_rx000_synt[5])
  );
  (* src = "synth_serial_paralelo1.v:84" *)
  DFF _180_ (
    .C(clk_4f),
    .D(container[6]),
    .Q(data_rx000_synt[6])
  );
  (* src = "synth_serial_paralelo1.v:84" *)
  DFF _181_ (
    .C(clk_4f),
    .D(container[7]),
    .Q(data_rx000_synt[7])
  );
  (* src = "synth_serial_paralelo1.v:65" *)
  DFF _182_ (
    .C(clk_4f),
    .D(_003_),
    .Q(valid_rx000_synt)
  );
  (* src = "synth_serial_paralelo1.v:40" *)
  DFF _183_ (
    .C(clk_4f),
    .D(_000_[0]),
    .Q(BC_counter[0])
  );
  (* src = "synth_serial_paralelo1.v:40" *)
  DFF _184_ (
    .C(clk_4f),
    .D(_000_[1]),
    .Q(BC_counter[1])
  );
  (* src = "synth_serial_paralelo1.v:40" *)
  DFF _185_ (
    .C(clk_4f),
    .D(_000_[2]),
    .Q(BC_counter[2])
  );
  (* src = "synth_serial_paralelo1.v:30" *)
  DFF _186_ (
    .C(_004_),
    .D(_001_[0]),
    .Q(container[0])
  );
  (* src = "synth_serial_paralelo1.v:30" *)
  DFF _187_ (
    .C(_005_),
    .D(_001_[1]),
    .Q(container[1])
  );
  (* src = "synth_serial_paralelo1.v:30" *)
  DFF _188_ (
    .C(_006_),
    .D(_001_[2]),
    .Q(container[2])
  );
  (* src = "synth_serial_paralelo1.v:30" *)
  DFF _189_ (
    .C(_007_),
    .D(_001_[3]),
    .Q(container[3])
  );
  (* src = "synth_serial_paralelo1.v:30" *)
  DFF _190_ (
    .C(_008_),
    .D(_001_[4]),
    .Q(container[4])
  );
  (* src = "synth_serial_paralelo1.v:30" *)
  DFF _191_ (
    .C(_009_),
    .D(_001_[5]),
    .Q(container[5])
  );
  (* src = "synth_serial_paralelo1.v:30" *)
  DFF _192_ (
    .C(_010_),
    .D(_001_[6]),
    .Q(container[6])
  );
  (* src = "synth_serial_paralelo1.v:30" *)
  DFF _193_ (
    .C(_011_),
    .D(_001_[7]),
    .Q(container[7])
  );
  (* src = "synth_serial_paralelo1.v:19" *)
  DFF _194_ (
    .C(clk_32f),
    .D(_002_[0]),
    .Q(counter[0])
  );
  (* src = "synth_serial_paralelo1.v:19" *)
  DFF _195_ (
    .C(clk_32f),
    .D(_002_[1]),
    .Q(counter[1])
  );
  (* src = "synth_serial_paralelo1.v:19" *)
  DFF _196_ (
    .C(clk_32f),
    .D(_002_[2]),
    .Q(counter[2])
  );
  (* src = "synth_serial_paralelo1.v:13" *)
  DFF _197_ (
    .C(clk_4f),
    .D(reset),
    .Q(reset_s)
  );
endmodule

(* src = "synth_serial_paralelo2.v:1" *)
module synth_serial_paralelo2(IDLE_OUT_synt, clk_f, clk_4f, clk_32f, reset, inserter_synt);
  (* src = "synth_serial_paralelo2.v:34" *)
  wire [2:0] _000_;
  (* src = "synth_serial_paralelo2.v:29" *)
  wire [7:0] _001_;
  (* src = "synth_serial_paralelo2.v:20" *)
  wire [2:0] _002_;
  (* src = "synth_serial_paralelo2.v:49" *)
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  (* src = "synth_serial_paralelo2.v:12" *)
  wire [2:0] BC_counter;
  (* src = "synth_serial_paralelo2.v:1" *)
  output IDLE_OUT_synt;
  (* src = "synth_serial_paralelo2.v:10" *)
  wire IDLE_OUT_synt_N;
  (* src = "synth_serial_paralelo2.v:2" *)
  input clk_32f;
  (* src = "synth_serial_paralelo2.v:2" *)
  input clk_4f;
  (* src = "synth_serial_paralelo2.v:2" *)
  input clk_f;
  (* src = "synth_serial_paralelo2.v:13" *)
  wire [7:0] container;
  (* src = "synth_serial_paralelo2.v:12" *)
  wire [2:0] counter;
  (* src = "synth_serial_paralelo2.v:11" *)
  wire idle_in;
  (* src = "synth_serial_paralelo2.v:3" *)
  input inserter_synt;
  (* src = "synth_serial_paralelo2.v:3" *)
  input reset;
  (* src = "synth_serial_paralelo2.v:10" *)
  wire reset_s;
  NOT _090_ (
    .A(counter[2]),
    .Y(_040_)
  );
  NOT _091_ (
    .A(counter[0]),
    .Y(_041_)
  );
  NOT _092_ (
    .A(counter[1]),
    .Y(_042_)
  );
  NOT _093_ (
    .A(BC_counter[2]),
    .Y(_043_)
  );
  NOT _094_ (
    .A(reset_s),
    .Y(_044_)
  );
  NOT _095_ (
    .A(BC_counter[0]),
    .Y(_045_)
  );
  NOT _096_ (
    .A(BC_counter[1]),
    .Y(_046_)
  );
  NOT _097_ (
    .A(clk_32f),
    .Y(_004_)
  );
  NOR _098_ (
    .A(container[0]),
    .B(container[1]),
    .Y(_047_)
  );
  NAND _099_ (
    .A(container[5]),
    .B(container[4]),
    .Y(_048_)
  );
  NAND _100_ (
    .A(container[3]),
    .B(container[2]),
    .Y(_049_)
  );
  NOR _101_ (
    .A(_048_),
    .B(_049_),
    .Y(_050_)
  );
  NAND _102_ (
    .A(container[4]),
    .B(container[3]),
    .Y(_051_)
  );
  NAND _103_ (
    .A(container[5]),
    .B(container[2]),
    .Y(_052_)
  );
  NOT _104_ (
    .A(_052_),
    .Y(_053_)
  );
  NAND _105_ (
    .A(_047_),
    .B(_053_),
    .Y(_054_)
  );
  NOR _106_ (
    .A(_051_),
    .B(_054_),
    .Y(_055_)
  );
  NAND _107_ (
    .A(_047_),
    .B(_050_),
    .Y(_056_)
  );
  NAND _108_ (
    .A(container[6]),
    .B(_055_),
    .Y(_057_)
  );
  NOR _109_ (
    .A(container[7]),
    .B(_057_),
    .Y(_058_)
  );
  NOR _110_ (
    .A(idle_in),
    .B(_058_),
    .Y(_059_)
  );
  NOR _111_ (
    .A(_044_),
    .B(_059_),
    .Y(_003_)
  );
  NAND _112_ (
    .A(container[7]),
    .B(_043_),
    .Y(_060_)
  );
  NOR _113_ (
    .A(BC_counter[2]),
    .B(container[6]),
    .Y(_061_)
  );
  NOR _114_ (
    .A(container[6]),
    .B(_060_),
    .Y(_062_)
  );
  NAND _115_ (
    .A(container[7]),
    .B(_061_),
    .Y(_063_)
  );
  NOR _116_ (
    .A(_056_),
    .B(_063_),
    .Y(_064_)
  );
  NAND _117_ (
    .A(_055_),
    .B(_062_),
    .Y(_065_)
  );
  NOR _118_ (
    .A(_045_),
    .B(_065_),
    .Y(_066_)
  );
  NAND _119_ (
    .A(BC_counter[0]),
    .B(_064_),
    .Y(_067_)
  );
  NAND _120_ (
    .A(_045_),
    .B(_065_),
    .Y(_068_)
  );
  NAND _121_ (
    .A(reset_s),
    .B(_068_),
    .Y(_069_)
  );
  NOR _122_ (
    .A(_066_),
    .B(_069_),
    .Y(_000_[0])
  );
  NOR _123_ (
    .A(_046_),
    .B(_067_),
    .Y(_070_)
  );
  NAND _124_ (
    .A(_046_),
    .B(_067_),
    .Y(_071_)
  );
  NAND _125_ (
    .A(reset_s),
    .B(_071_),
    .Y(_072_)
  );
  NOR _126_ (
    .A(_070_),
    .B(_072_),
    .Y(_000_[1])
  );
  NOR _127_ (
    .A(BC_counter[2]),
    .B(_070_),
    .Y(_073_)
  );
  NOR _128_ (
    .A(_044_),
    .B(_073_),
    .Y(_000_[2])
  );
  NOR _129_ (
    .A(_041_),
    .B(_042_),
    .Y(_074_)
  );
  NAND _130_ (
    .A(counter[0]),
    .B(counter[1]),
    .Y(_075_)
  );
  NAND _131_ (
    .A(counter[2]),
    .B(_074_),
    .Y(_076_)
  );
  NOT _132_ (
    .A(_076_),
    .Y(_077_)
  );
  NAND _133_ (
    .A(inserter_synt),
    .B(_077_),
    .Y(_078_)
  );
  NAND _134_ (
    .A(container[7]),
    .B(_076_),
    .Y(_079_)
  );
  NAND _135_ (
    .A(_078_),
    .B(_079_),
    .Y(_001_[7])
  );
  NOR _136_ (
    .A(counter[0]),
    .B(_042_),
    .Y(_080_)
  );
  NAND _137_ (
    .A(_041_),
    .B(counter[1]),
    .Y(_081_)
  );
  NOR _138_ (
    .A(_040_),
    .B(_081_),
    .Y(_082_)
  );
  NAND _139_ (
    .A(counter[2]),
    .B(_080_),
    .Y(_083_)
  );
  NAND _140_ (
    .A(inserter_synt),
    .B(_082_),
    .Y(_084_)
  );
  NAND _141_ (
    .A(container[6]),
    .B(_083_),
    .Y(_085_)
  );
  NAND _142_ (
    .A(_084_),
    .B(_085_),
    .Y(_001_[6])
  );
  NOR _143_ (
    .A(_041_),
    .B(counter[1]),
    .Y(_086_)
  );
  NAND _144_ (
    .A(counter[0]),
    .B(_042_),
    .Y(_087_)
  );
  NOR _145_ (
    .A(_040_),
    .B(_087_),
    .Y(_088_)
  );
  NAND _146_ (
    .A(counter[2]),
    .B(_086_),
    .Y(_089_)
  );
  NAND _147_ (
    .A(inserter_synt),
    .B(_088_),
    .Y(_012_)
  );
  NAND _148_ (
    .A(container[5]),
    .B(_089_),
    .Y(_013_)
  );
  NAND _149_ (
    .A(_012_),
    .B(_013_),
    .Y(_001_[5])
  );
  NOR _150_ (
    .A(counter[0]),
    .B(counter[1]),
    .Y(_014_)
  );
  NOT _151_ (
    .A(_014_),
    .Y(_015_)
  );
  NAND _152_ (
    .A(counter[2]),
    .B(_014_),
    .Y(_016_)
  );
  NOT _153_ (
    .A(_016_),
    .Y(_017_)
  );
  NAND _154_ (
    .A(inserter_synt),
    .B(_017_),
    .Y(_018_)
  );
  NAND _155_ (
    .A(container[4]),
    .B(_016_),
    .Y(_019_)
  );
  NAND _156_ (
    .A(_018_),
    .B(_019_),
    .Y(_001_[4])
  );
  NOR _157_ (
    .A(counter[2]),
    .B(_075_),
    .Y(_020_)
  );
  NOT _158_ (
    .A(_020_),
    .Y(_021_)
  );
  NAND _159_ (
    .A(inserter_synt),
    .B(_020_),
    .Y(_022_)
  );
  NAND _160_ (
    .A(container[3]),
    .B(_021_),
    .Y(_023_)
  );
  NAND _161_ (
    .A(_022_),
    .B(_023_),
    .Y(_001_[3])
  );
  NOR _162_ (
    .A(counter[2]),
    .B(_081_),
    .Y(_024_)
  );
  NAND _163_ (
    .A(_040_),
    .B(_080_),
    .Y(_025_)
  );
  NAND _164_ (
    .A(inserter_synt),
    .B(_024_),
    .Y(_026_)
  );
  NAND _165_ (
    .A(container[2]),
    .B(_025_),
    .Y(_027_)
  );
  NAND _166_ (
    .A(_026_),
    .B(_027_),
    .Y(_001_[2])
  );
  NOR _167_ (
    .A(counter[2]),
    .B(_087_),
    .Y(_028_)
  );
  NAND _168_ (
    .A(_040_),
    .B(_086_),
    .Y(_029_)
  );
  NAND _169_ (
    .A(inserter_synt),
    .B(_028_),
    .Y(_030_)
  );
  NAND _170_ (
    .A(container[1]),
    .B(_029_),
    .Y(_031_)
  );
  NAND _171_ (
    .A(_030_),
    .B(_031_),
    .Y(_001_[1])
  );
  NOR _172_ (
    .A(counter[2]),
    .B(_015_),
    .Y(_032_)
  );
  NAND _173_ (
    .A(_040_),
    .B(_014_),
    .Y(_033_)
  );
  NAND _174_ (
    .A(inserter_synt),
    .B(_032_),
    .Y(_034_)
  );
  NAND _175_ (
    .A(container[0]),
    .B(_033_),
    .Y(_035_)
  );
  NAND _176_ (
    .A(_034_),
    .B(_035_),
    .Y(_001_[0])
  );
  NOR _177_ (
    .A(counter[0]),
    .B(_044_),
    .Y(_002_[0])
  );
  NAND _178_ (
    .A(reset_s),
    .B(_075_),
    .Y(_036_)
  );
  NOR _179_ (
    .A(_014_),
    .B(_036_),
    .Y(_002_[1])
  );
  NAND _180_ (
    .A(_040_),
    .B(_075_),
    .Y(_037_)
  );
  NAND _181_ (
    .A(reset_s),
    .B(_037_),
    .Y(_038_)
  );
  NOR _182_ (
    .A(_077_),
    .B(_038_),
    .Y(_002_[2])
  );
  NAND _183_ (
    .A(BC_counter[2]),
    .B(idle_in),
    .Y(_039_)
  );
  NOT _184_ (
    .A(_039_),
    .Y(IDLE_OUT_synt_N)
  );
  NOT _185_ (
    .A(clk_32f),
    .Y(_005_)
  );
  NOT _186_ (
    .A(clk_32f),
    .Y(_006_)
  );
  NOT _187_ (
    .A(clk_32f),
    .Y(_007_)
  );
  NOT _188_ (
    .A(clk_32f),
    .Y(_008_)
  );
  NOT _189_ (
    .A(clk_32f),
    .Y(_009_)
  );
  NOT _190_ (
    .A(clk_32f),
    .Y(_010_)
  );
  NOT _191_ (
    .A(clk_32f),
    .Y(_011_)
  );
  (* src = "synth_serial_paralelo2.v:84" *)
  DFF _192_ (
    .C(clk_f),
    .D(IDLE_OUT_synt_N),
    .Q(IDLE_OUT_synt)
  );
  (* src = "synth_serial_paralelo2.v:49" *)
  DFF _193_ (
    .C(clk_4f),
    .D(_003_),
    .Q(idle_in)
  );
  (* src = "synth_serial_paralelo2.v:34" *)
  DFF _194_ (
    .C(clk_4f),
    .D(_000_[0]),
    .Q(BC_counter[0])
  );
  (* src = "synth_serial_paralelo2.v:34" *)
  DFF _195_ (
    .C(clk_4f),
    .D(_000_[1]),
    .Q(BC_counter[1])
  );
  (* src = "synth_serial_paralelo2.v:34" *)
  DFF _196_ (
    .C(clk_4f),
    .D(_000_[2]),
    .Q(BC_counter[2])
  );
  (* src = "synth_serial_paralelo2.v:29" *)
  DFF _197_ (
    .C(_004_),
    .D(_001_[0]),
    .Q(container[0])
  );
  (* src = "synth_serial_paralelo2.v:29" *)
  DFF _198_ (
    .C(_005_),
    .D(_001_[1]),
    .Q(container[1])
  );
  (* src = "synth_serial_paralelo2.v:29" *)
  DFF _199_ (
    .C(_006_),
    .D(_001_[2]),
    .Q(container[2])
  );
  (* src = "synth_serial_paralelo2.v:29" *)
  DFF _200_ (
    .C(_007_),
    .D(_001_[3]),
    .Q(container[3])
  );
  (* src = "synth_serial_paralelo2.v:29" *)
  DFF _201_ (
    .C(_008_),
    .D(_001_[4]),
    .Q(container[4])
  );
  (* src = "synth_serial_paralelo2.v:29" *)
  DFF _202_ (
    .C(_009_),
    .D(_001_[5]),
    .Q(container[5])
  );
  (* src = "synth_serial_paralelo2.v:29" *)
  DFF _203_ (
    .C(_010_),
    .D(_001_[6]),
    .Q(container[6])
  );
  (* src = "synth_serial_paralelo2.v:29" *)
  DFF _204_ (
    .C(_011_),
    .D(_001_[7]),
    .Q(container[7])
  );
  (* src = "synth_serial_paralelo2.v:20" *)
  DFF _205_ (
    .C(clk_32f),
    .D(_002_[0]),
    .Q(counter[0])
  );
  (* src = "synth_serial_paralelo2.v:20" *)
  DFF _206_ (
    .C(clk_32f),
    .D(_002_[1]),
    .Q(counter[1])
  );
  (* src = "synth_serial_paralelo2.v:20" *)
  DFF _207_ (
    .C(clk_32f),
    .D(_002_[2]),
    .Q(counter[2])
  );
  (* src = "synth_serial_paralelo2.v:16" *)
  DFF _208_ (
    .C(clk_4f),
    .D(reset),
    .Q(reset_s)
  );
endmodule
