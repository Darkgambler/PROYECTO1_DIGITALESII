/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* top =  1  *)
(* src = "synth_mux2x1_8bits.v:10" *)
module synth_mux2x1_8bits(data_000_synt, valid_000_synt, data_00, data_11, valid_00, valid_11, clk_4f, clk_2f, reset);
  (* src = "synth_mux2x1_8bits.v:40" *)
  wire [7:0] _000_;
  (* src = "synth_mux2x1_8bits.v:31" *)
  wire [8:0] _001_;
  (* src = "synth_mux2x1_8bits.v:40" *)
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  (* src = "synth_mux2x1_8bits.v:14" *)
  input clk_2f;
  (* src = "synth_mux2x1_8bits.v:14" *)
  input clk_4f;
  (* src = "synth_mux2x1_8bits.v:12" *)
  input [7:0] data_00;
  (* src = "synth_mux2x1_8bits.v:10" *)
  output [7:0] data_000_synt;
  (* src = "synth_mux2x1_8bits.v:12" *)
  input [7:0] data_11;
  (* src = "synth_mux2x1_8bits.v:18" *)
  wire [8:0] paq_000;
  (* src = "synth_mux2x1_8bits.v:16" *)
  wire [8:0] paq_0_x;
  (* src = "synth_mux2x1_8bits.v:17" *)
  wire [8:0] paq_1_x;
  (* src = "synth_mux2x1_8bits.v:14" *)
  input reset;
  (* src = "synth_mux2x1_8bits.v:19" *)
  wire reset_s;
  (* src = "synth_mux2x1_8bits.v:13" *)
  input valid_00;
  (* src = "synth_mux2x1_8bits.v:11" *)
  output valid_000_synt;
  (* src = "synth_mux2x1_8bits.v:13" *)
  input valid_11;
  NOT _040_ (
    .A(clk_2f),
    .Y(_015_)
  );
  NOT _041_ (
    .A(clk_4f),
    .Y(_003_)
  );
  NAND _042_ (
    .A(paq_000[2]),
    .B(reset_s),
    .Y(_016_)
  );
  NOT _043_ (
    .A(_016_),
    .Y(_000_[1])
  );
  NAND _044_ (
    .A(reset_s),
    .B(paq_000[3]),
    .Y(_017_)
  );
  NOT _045_ (
    .A(_017_),
    .Y(_000_[2])
  );
  NAND _046_ (
    .A(reset_s),
    .B(paq_000[4]),
    .Y(_018_)
  );
  NOT _047_ (
    .A(_018_),
    .Y(_000_[3])
  );
  NAND _048_ (
    .A(reset_s),
    .B(paq_000[5]),
    .Y(_019_)
  );
  NOT _049_ (
    .A(_019_),
    .Y(_000_[4])
  );
  NAND _050_ (
    .A(reset_s),
    .B(paq_000[6]),
    .Y(_020_)
  );
  NOT _051_ (
    .A(_020_),
    .Y(_000_[5])
  );
  NAND _052_ (
    .A(reset_s),
    .B(paq_000[7]),
    .Y(_021_)
  );
  NOT _053_ (
    .A(_021_),
    .Y(_000_[6])
  );
  NAND _054_ (
    .A(reset_s),
    .B(paq_000[8]),
    .Y(_022_)
  );
  NOT _055_ (
    .A(_022_),
    .Y(_000_[7])
  );
  NAND _056_ (
    .A(reset_s),
    .B(paq_000[0]),
    .Y(_023_)
  );
  NOT _057_ (
    .A(_023_),
    .Y(_002_)
  );
  NAND _058_ (
    .A(valid_00),
    .B(clk_2f),
    .Y(_024_)
  );
  NAND _059_ (
    .A(valid_11),
    .B(_015_),
    .Y(_025_)
  );
  NAND _060_ (
    .A(_024_),
    .B(_025_),
    .Y(_001_[0])
  );
  NAND _061_ (
    .A(clk_2f),
    .B(data_00[0]),
    .Y(_026_)
  );
  NAND _062_ (
    .A(_015_),
    .B(data_11[0]),
    .Y(_027_)
  );
  NAND _063_ (
    .A(_026_),
    .B(_027_),
    .Y(_001_[1])
  );
  NAND _064_ (
    .A(clk_2f),
    .B(data_00[1]),
    .Y(_028_)
  );
  NAND _065_ (
    .A(_015_),
    .B(data_11[1]),
    .Y(_029_)
  );
  NAND _066_ (
    .A(_028_),
    .B(_029_),
    .Y(_001_[2])
  );
  NAND _067_ (
    .A(clk_2f),
    .B(data_00[2]),
    .Y(_030_)
  );
  NAND _068_ (
    .A(_015_),
    .B(data_11[2]),
    .Y(_031_)
  );
  NAND _069_ (
    .A(_030_),
    .B(_031_),
    .Y(_001_[3])
  );
  NAND _070_ (
    .A(clk_2f),
    .B(data_00[3]),
    .Y(_032_)
  );
  NAND _071_ (
    .A(_015_),
    .B(data_11[3]),
    .Y(_033_)
  );
  NAND _072_ (
    .A(_032_),
    .B(_033_),
    .Y(_001_[4])
  );
  NAND _073_ (
    .A(clk_2f),
    .B(data_00[4]),
    .Y(_034_)
  );
  NAND _074_ (
    .A(_015_),
    .B(data_11[4]),
    .Y(_035_)
  );
  NAND _075_ (
    .A(_034_),
    .B(_035_),
    .Y(_001_[5])
  );
  NAND _076_ (
    .A(clk_2f),
    .B(data_00[5]),
    .Y(_036_)
  );
  NAND _077_ (
    .A(_015_),
    .B(data_11[5]),
    .Y(_037_)
  );
  NAND _078_ (
    .A(_036_),
    .B(_037_),
    .Y(_001_[6])
  );
  NAND _079_ (
    .A(clk_2f),
    .B(data_00[6]),
    .Y(_038_)
  );
  NAND _080_ (
    .A(_015_),
    .B(data_11[6]),
    .Y(_039_)
  );
  NAND _081_ (
    .A(_038_),
    .B(_039_),
    .Y(_001_[7])
  );
  NAND _082_ (
    .A(clk_2f),
    .B(data_00[7]),
    .Y(_012_)
  );
  NAND _083_ (
    .A(_015_),
    .B(data_11[7]),
    .Y(_013_)
  );
  NAND _084_ (
    .A(_012_),
    .B(_013_),
    .Y(_001_[8])
  );
  NAND _085_ (
    .A(reset_s),
    .B(paq_000[1]),
    .Y(_014_)
  );
  NOT _086_ (
    .A(_014_),
    .Y(_000_[0])
  );
  NOT _087_ (
    .A(clk_4f),
    .Y(_004_)
  );
  NOT _088_ (
    .A(clk_4f),
    .Y(_005_)
  );
  NOT _089_ (
    .A(clk_4f),
    .Y(_006_)
  );
  NOT _090_ (
    .A(clk_4f),
    .Y(_007_)
  );
  NOT _091_ (
    .A(clk_4f),
    .Y(_008_)
  );
  NOT _092_ (
    .A(clk_4f),
    .Y(_009_)
  );
  NOT _093_ (
    .A(clk_4f),
    .Y(_010_)
  );
  NOT _094_ (
    .A(clk_4f),
    .Y(_011_)
  );
  (* src = "synth_mux2x1_8bits.v:40" *)
  DFF _095_ (
    .C(clk_4f),
    .D(_000_[0]),
    .Q(data_000_synt[0])
  );
  (* src = "synth_mux2x1_8bits.v:40" *)
  DFF _096_ (
    .C(clk_4f),
    .D(_000_[1]),
    .Q(data_000_synt[1])
  );
  (* src = "synth_mux2x1_8bits.v:40" *)
  DFF _097_ (
    .C(clk_4f),
    .D(_000_[2]),
    .Q(data_000_synt[2])
  );
  (* src = "synth_mux2x1_8bits.v:40" *)
  DFF _098_ (
    .C(clk_4f),
    .D(_000_[3]),
    .Q(data_000_synt[3])
  );
  (* src = "synth_mux2x1_8bits.v:40" *)
  DFF _099_ (
    .C(clk_4f),
    .D(_000_[4]),
    .Q(data_000_synt[4])
  );
  (* src = "synth_mux2x1_8bits.v:40" *)
  DFF _100_ (
    .C(clk_4f),
    .D(_000_[5]),
    .Q(data_000_synt[5])
  );
  (* src = "synth_mux2x1_8bits.v:40" *)
  DFF _101_ (
    .C(clk_4f),
    .D(_000_[6]),
    .Q(data_000_synt[6])
  );
  (* src = "synth_mux2x1_8bits.v:40" *)
  DFF _102_ (
    .C(clk_4f),
    .D(_000_[7]),
    .Q(data_000_synt[7])
  );
  (* src = "synth_mux2x1_8bits.v:40" *)
  DFF _103_ (
    .C(clk_4f),
    .D(_002_),
    .Q(valid_000_synt)
  );
  (* src = "synth_mux2x1_8bits.v:31" *)
  DFF _104_ (
    .C(_003_),
    .D(_001_[0]),
    .Q(paq_000[0])
  );
  (* src = "synth_mux2x1_8bits.v:31" *)
  DFF _105_ (
    .C(_004_),
    .D(_001_[1]),
    .Q(paq_000[1])
  );
  (* src = "synth_mux2x1_8bits.v:31" *)
  DFF _106_ (
    .C(_005_),
    .D(_001_[2]),
    .Q(paq_000[2])
  );
  (* src = "synth_mux2x1_8bits.v:31" *)
  DFF _107_ (
    .C(_006_),
    .D(_001_[3]),
    .Q(paq_000[3])
  );
  (* src = "synth_mux2x1_8bits.v:31" *)
  DFF _108_ (
    .C(_007_),
    .D(_001_[4]),
    .Q(paq_000[4])
  );
  (* src = "synth_mux2x1_8bits.v:31" *)
  DFF _109_ (
    .C(_008_),
    .D(_001_[5]),
    .Q(paq_000[5])
  );
  (* src = "synth_mux2x1_8bits.v:31" *)
  DFF _110_ (
    .C(_009_),
    .D(_001_[6]),
    .Q(paq_000[6])
  );
  (* src = "synth_mux2x1_8bits.v:31" *)
  DFF _111_ (
    .C(_010_),
    .D(_001_[7]),
    .Q(paq_000[7])
  );
  (* src = "synth_mux2x1_8bits.v:31" *)
  DFF _112_ (
    .C(_011_),
    .D(_001_[8]),
    .Q(paq_000[8])
  );
  (* src = "synth_mux2x1_8bits.v:23" *)
  DFF _113_ (
    .C(clk_4f),
    .D(reset),
    .Q(reset_s)
  );
  assign paq_0_x = { data_00, valid_00 };
  assign paq_1_x = { data_11, valid_11 };
endmodule
