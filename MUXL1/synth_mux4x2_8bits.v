/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* top =  1  *)
(* src = "synth_mux4x2_8bits.v:10" *)
module synth_mux4x2_8bits(data_00_synt, data_11_synt, valid_00_synt, valid_11_synt, data_0, data_1, data_2, data_3, valid_0, valid_1, valid_2, valid_3, clk_2f, clk_f);
  (* src = "synth_mux4x2_8bits.v:30" *)
  wire [8:0] _000_;
  (* src = "synth_mux4x2_8bits.v:30" *)
  wire [8:0] _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  (* src = "synth_mux4x2_8bits.v:14" *)
  input clk_2f;
  (* src = "synth_mux4x2_8bits.v:14" *)
  input clk_f;
  (* src = "synth_mux4x2_8bits.v:12" *)
  input [7:0] data_0;
  (* src = "synth_mux4x2_8bits.v:10" *)
  output [7:0] data_00_synt;
  (* src = "synth_mux4x2_8bits.v:12" *)
  input [7:0] data_1;
  (* src = "synth_mux4x2_8bits.v:10" *)
  output [7:0] data_11_synt;
  (* src = "synth_mux4x2_8bits.v:12" *)
  input [7:0] data_2;
  (* src = "synth_mux4x2_8bits.v:12" *)
  input [7:0] data_3;
  (* src = "synth_mux4x2_8bits.v:20" *)
  wire [8:0] paq_00;
  (* src = "synth_mux4x2_8bits.v:16" *)
  wire [8:0] paq_0_x;
  (* src = "synth_mux4x2_8bits.v:20" *)
  wire [8:0] paq_11;
  (* src = "synth_mux4x2_8bits.v:17" *)
  wire [8:0] paq_1_x;
  (* src = "synth_mux4x2_8bits.v:18" *)
  wire [8:0] paq_2_x;
  (* src = "synth_mux4x2_8bits.v:19" *)
  wire [8:0] paq_3_x;
  (* src = "synth_mux4x2_8bits.v:13" *)
  input valid_0;
  (* src = "synth_mux4x2_8bits.v:11" *)
  output valid_00_synt;
  (* src = "synth_mux4x2_8bits.v:13" *)
  input valid_1;
  (* src = "synth_mux4x2_8bits.v:11" *)
  output valid_11_synt;
  (* src = "synth_mux4x2_8bits.v:13" *)
  input valid_2;
  (* src = "synth_mux4x2_8bits.v:13" *)
  input valid_3;
  NOT _057_ (
    .A(clk_2f),
    .Y(_019_)
  );
  NOT _058_ (
    .A(clk_f),
    .Y(_040_)
  );
  NAND _059_ (
    .A(data_2[0]),
    .B(clk_f),
    .Y(_041_)
  );
  NAND _060_ (
    .A(data_3[0]),
    .B(_040_),
    .Y(_042_)
  );
  NAND _061_ (
    .A(_041_),
    .B(_042_),
    .Y(_001_[1])
  );
  NAND _062_ (
    .A(clk_f),
    .B(data_2[1]),
    .Y(_043_)
  );
  NAND _063_ (
    .A(_040_),
    .B(data_3[1]),
    .Y(_044_)
  );
  NAND _064_ (
    .A(_043_),
    .B(_044_),
    .Y(_001_[2])
  );
  NAND _065_ (
    .A(clk_f),
    .B(data_2[2]),
    .Y(_045_)
  );
  NAND _066_ (
    .A(_040_),
    .B(data_3[2]),
    .Y(_046_)
  );
  NAND _067_ (
    .A(_045_),
    .B(_046_),
    .Y(_001_[3])
  );
  NAND _068_ (
    .A(clk_f),
    .B(data_2[3]),
    .Y(_047_)
  );
  NAND _069_ (
    .A(_040_),
    .B(data_3[3]),
    .Y(_048_)
  );
  NAND _070_ (
    .A(_047_),
    .B(_048_),
    .Y(_001_[4])
  );
  NAND _071_ (
    .A(clk_f),
    .B(data_2[4]),
    .Y(_049_)
  );
  NAND _072_ (
    .A(_040_),
    .B(data_3[4]),
    .Y(_050_)
  );
  NAND _073_ (
    .A(_049_),
    .B(_050_),
    .Y(_001_[5])
  );
  NAND _074_ (
    .A(clk_f),
    .B(data_2[5]),
    .Y(_051_)
  );
  NAND _075_ (
    .A(_040_),
    .B(data_3[5]),
    .Y(_052_)
  );
  NAND _076_ (
    .A(_051_),
    .B(_052_),
    .Y(_001_[6])
  );
  NAND _077_ (
    .A(clk_f),
    .B(data_2[6]),
    .Y(_053_)
  );
  NAND _078_ (
    .A(_040_),
    .B(data_3[6]),
    .Y(_054_)
  );
  NAND _079_ (
    .A(_053_),
    .B(_054_),
    .Y(_001_[7])
  );
  NAND _080_ (
    .A(clk_f),
    .B(data_2[7]),
    .Y(_055_)
  );
  NAND _081_ (
    .A(_040_),
    .B(data_3[7]),
    .Y(_056_)
  );
  NAND _082_ (
    .A(_055_),
    .B(_056_),
    .Y(_001_[8])
  );
  NAND _083_ (
    .A(clk_f),
    .B(valid_0),
    .Y(_020_)
  );
  NAND _084_ (
    .A(_040_),
    .B(valid_1),
    .Y(_021_)
  );
  NAND _085_ (
    .A(_020_),
    .B(_021_),
    .Y(_000_[0])
  );
  NAND _086_ (
    .A(clk_f),
    .B(data_0[0]),
    .Y(_022_)
  );
  NAND _087_ (
    .A(_040_),
    .B(data_1[0]),
    .Y(_023_)
  );
  NAND _088_ (
    .A(_022_),
    .B(_023_),
    .Y(_000_[1])
  );
  NAND _089_ (
    .A(clk_f),
    .B(data_0[1]),
    .Y(_024_)
  );
  NAND _090_ (
    .A(_040_),
    .B(data_1[1]),
    .Y(_025_)
  );
  NAND _091_ (
    .A(_024_),
    .B(_025_),
    .Y(_000_[2])
  );
  NAND _092_ (
    .A(clk_f),
    .B(data_0[2]),
    .Y(_026_)
  );
  NAND _093_ (
    .A(_040_),
    .B(data_1[2]),
    .Y(_027_)
  );
  NAND _094_ (
    .A(_026_),
    .B(_027_),
    .Y(_000_[3])
  );
  NAND _095_ (
    .A(clk_f),
    .B(data_0[3]),
    .Y(_028_)
  );
  NAND _096_ (
    .A(_040_),
    .B(data_1[3]),
    .Y(_029_)
  );
  NAND _097_ (
    .A(_028_),
    .B(_029_),
    .Y(_000_[4])
  );
  NAND _098_ (
    .A(clk_f),
    .B(data_0[4]),
    .Y(_030_)
  );
  NAND _099_ (
    .A(_040_),
    .B(data_1[4]),
    .Y(_031_)
  );
  NAND _100_ (
    .A(_030_),
    .B(_031_),
    .Y(_000_[5])
  );
  NAND _101_ (
    .A(clk_f),
    .B(data_0[5]),
    .Y(_032_)
  );
  NAND _102_ (
    .A(_040_),
    .B(data_1[5]),
    .Y(_033_)
  );
  NAND _103_ (
    .A(_032_),
    .B(_033_),
    .Y(_000_[6])
  );
  NAND _104_ (
    .A(clk_f),
    .B(data_0[6]),
    .Y(_034_)
  );
  NAND _105_ (
    .A(_040_),
    .B(data_1[6]),
    .Y(_035_)
  );
  NAND _106_ (
    .A(_034_),
    .B(_035_),
    .Y(_000_[7])
  );
  NAND _107_ (
    .A(clk_f),
    .B(data_0[7]),
    .Y(_036_)
  );
  NAND _108_ (
    .A(_040_),
    .B(data_1[7]),
    .Y(_037_)
  );
  NAND _109_ (
    .A(_036_),
    .B(_037_),
    .Y(_000_[8])
  );
  NAND _110_ (
    .A(clk_f),
    .B(valid_2),
    .Y(_038_)
  );
  NAND _111_ (
    .A(_040_),
    .B(valid_3),
    .Y(_039_)
  );
  NAND _112_ (
    .A(_038_),
    .B(_039_),
    .Y(_001_[0])
  );
  NOT _113_ (
    .A(clk_2f),
    .Y(_002_)
  );
  NOT _114_ (
    .A(clk_2f),
    .Y(_003_)
  );
  NOT _115_ (
    .A(clk_2f),
    .Y(_004_)
  );
  NOT _116_ (
    .A(clk_2f),
    .Y(_005_)
  );
  NOT _117_ (
    .A(clk_2f),
    .Y(_006_)
  );
  NOT _118_ (
    .A(clk_2f),
    .Y(_007_)
  );
  NOT _119_ (
    .A(clk_2f),
    .Y(_008_)
  );
  NOT _120_ (
    .A(clk_2f),
    .Y(_009_)
  );
  NOT _121_ (
    .A(clk_2f),
    .Y(_010_)
  );
  NOT _122_ (
    .A(clk_2f),
    .Y(_011_)
  );
  NOT _123_ (
    .A(clk_2f),
    .Y(_012_)
  );
  NOT _124_ (
    .A(clk_2f),
    .Y(_013_)
  );
  NOT _125_ (
    .A(clk_2f),
    .Y(_014_)
  );
  NOT _126_ (
    .A(clk_2f),
    .Y(_015_)
  );
  NOT _127_ (
    .A(clk_2f),
    .Y(_016_)
  );
  NOT _128_ (
    .A(clk_2f),
    .Y(_017_)
  );
  NOT _129_ (
    .A(clk_2f),
    .Y(_018_)
  );
  (* src = "synth_mux4x2_8bits.v:30" *)
  DFF _130_ (
    .C(_002_),
    .D(_000_[4]),
    .Q(paq_00[4])
  );
  (* src = "synth_mux4x2_8bits.v:30" *)
  DFF _131_ (
    .C(_003_),
    .D(_000_[5]),
    .Q(paq_00[5])
  );
  (* src = "synth_mux4x2_8bits.v:30" *)
  DFF _132_ (
    .C(_004_),
    .D(_000_[6]),
    .Q(paq_00[6])
  );
  (* src = "synth_mux4x2_8bits.v:30" *)
  DFF _133_ (
    .C(_005_),
    .D(_000_[7]),
    .Q(paq_00[7])
  );
  (* src = "synth_mux4x2_8bits.v:30" *)
  DFF _134_ (
    .C(_006_),
    .D(_000_[8]),
    .Q(paq_00[8])
  );
  (* src = "synth_mux4x2_8bits.v:30" *)
  DFF _135_ (
    .C(_007_),
    .D(_001_[0]),
    .Q(paq_11[0])
  );
  (* src = "synth_mux4x2_8bits.v:30" *)
  DFF _136_ (
    .C(_008_),
    .D(_001_[1]),
    .Q(paq_11[1])
  );
  (* src = "synth_mux4x2_8bits.v:30" *)
  DFF _137_ (
    .C(_009_),
    .D(_001_[2]),
    .Q(paq_11[2])
  );
  (* src = "synth_mux4x2_8bits.v:30" *)
  DFF _138_ (
    .C(_010_),
    .D(_001_[3]),
    .Q(paq_11[3])
  );
  (* src = "synth_mux4x2_8bits.v:30" *)
  DFF _139_ (
    .C(_011_),
    .D(_001_[4]),
    .Q(paq_11[4])
  );
  (* src = "synth_mux4x2_8bits.v:30" *)
  DFF _140_ (
    .C(_012_),
    .D(_001_[5]),
    .Q(paq_11[5])
  );
  (* src = "synth_mux4x2_8bits.v:30" *)
  DFF _141_ (
    .C(_013_),
    .D(_001_[6]),
    .Q(paq_11[6])
  );
  (* src = "synth_mux4x2_8bits.v:30" *)
  DFF _142_ (
    .C(_014_),
    .D(_001_[7]),
    .Q(paq_11[7])
  );
  (* src = "synth_mux4x2_8bits.v:30" *)
  DFF _143_ (
    .C(_015_),
    .D(_001_[8]),
    .Q(paq_11[8])
  );
  (* src = "synth_mux4x2_8bits.v:41" *)
  DFF _144_ (
    .C(clk_2f),
    .D(paq_00[1]),
    .Q(data_00_synt[0])
  );
  (* src = "synth_mux4x2_8bits.v:41" *)
  DFF _145_ (
    .C(clk_2f),
    .D(paq_00[2]),
    .Q(data_00_synt[1])
  );
  (* src = "synth_mux4x2_8bits.v:41" *)
  DFF _146_ (
    .C(clk_2f),
    .D(paq_00[3]),
    .Q(data_00_synt[2])
  );
  (* src = "synth_mux4x2_8bits.v:41" *)
  DFF _147_ (
    .C(clk_2f),
    .D(paq_00[4]),
    .Q(data_00_synt[3])
  );
  (* src = "synth_mux4x2_8bits.v:41" *)
  DFF _148_ (
    .C(clk_2f),
    .D(paq_00[5]),
    .Q(data_00_synt[4])
  );
  (* src = "synth_mux4x2_8bits.v:41" *)
  DFF _149_ (
    .C(clk_2f),
    .D(paq_00[6]),
    .Q(data_00_synt[5])
  );
  (* src = "synth_mux4x2_8bits.v:41" *)
  DFF _150_ (
    .C(clk_2f),
    .D(paq_00[7]),
    .Q(data_00_synt[6])
  );
  (* src = "synth_mux4x2_8bits.v:41" *)
  DFF _151_ (
    .C(clk_2f),
    .D(paq_00[8]),
    .Q(data_00_synt[7])
  );
  (* src = "synth_mux4x2_8bits.v:41" *)
  DFF _152_ (
    .C(clk_2f),
    .D(paq_11[1]),
    .Q(data_11_synt[0])
  );
  (* src = "synth_mux4x2_8bits.v:41" *)
  DFF _153_ (
    .C(clk_2f),
    .D(paq_11[2]),
    .Q(data_11_synt[1])
  );
  (* src = "synth_mux4x2_8bits.v:41" *)
  DFF _154_ (
    .C(clk_2f),
    .D(paq_11[3]),
    .Q(data_11_synt[2])
  );
  (* src = "synth_mux4x2_8bits.v:41" *)
  DFF _155_ (
    .C(clk_2f),
    .D(paq_11[4]),
    .Q(data_11_synt[3])
  );
  (* src = "synth_mux4x2_8bits.v:41" *)
  DFF _156_ (
    .C(clk_2f),
    .D(paq_11[5]),
    .Q(data_11_synt[4])
  );
  (* src = "synth_mux4x2_8bits.v:41" *)
  DFF _157_ (
    .C(clk_2f),
    .D(paq_11[6]),
    .Q(data_11_synt[5])
  );
  (* src = "synth_mux4x2_8bits.v:41" *)
  DFF _158_ (
    .C(clk_2f),
    .D(paq_11[7]),
    .Q(data_11_synt[6])
  );
  (* src = "synth_mux4x2_8bits.v:41" *)
  DFF _159_ (
    .C(clk_2f),
    .D(paq_11[8]),
    .Q(data_11_synt[7])
  );
  (* src = "synth_mux4x2_8bits.v:41" *)
  DFF _160_ (
    .C(clk_2f),
    .D(paq_00[0]),
    .Q(valid_00_synt)
  );
  (* src = "synth_mux4x2_8bits.v:41" *)
  DFF _161_ (
    .C(clk_2f),
    .D(paq_11[0]),
    .Q(valid_11_synt)
  );
  (* src = "synth_mux4x2_8bits.v:30" *)
  DFF _162_ (
    .C(_016_),
    .D(_000_[0]),
    .Q(paq_00[0])
  );
  (* src = "synth_mux4x2_8bits.v:30" *)
  DFF _163_ (
    .C(_017_),
    .D(_000_[1]),
    .Q(paq_00[1])
  );
  (* src = "synth_mux4x2_8bits.v:30" *)
  DFF _164_ (
    .C(_018_),
    .D(_000_[2]),
    .Q(paq_00[2])
  );
  (* src = "synth_mux4x2_8bits.v:30" *)
  DFF _165_ (
    .C(_019_),
    .D(_000_[3]),
    .Q(paq_00[3])
  );
  assign paq_0_x = { data_0, valid_0 };
  assign paq_1_x = { data_1, valid_1 };
  assign paq_2_x = { data_2, valid_2 };
  assign paq_3_x = { data_3, valid_3 };
endmodule
